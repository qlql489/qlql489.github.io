<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年轮的自习室</title>
  
  <subtitle>以慢为快</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qlql489.github.io/"/>
  <updated>2022-11-19T08:49:40.691Z</updated>
  <id>http://qlql489.github.io/</id>
  
  <author>
    <name>年轮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot获取不到客户端ip问题排查</title>
    <link href="http://qlql489.github.io/2022/11/19/springboot%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AFip%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>http://qlql489.github.io/2022/11/19/springboot获取不到客户端ip问题排查/</id>
    <published>2022-11-19T15:38:36.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、现象"><a href="#一、现象" class="headerlink" title="一、现象"></a>一、现象</h3><p>springboot从2.0.2升级到 2.5.7后线上环境无法通过request.getHeader(“x-forwarded-for”)获取客户端ip地址，测试环境正常，开发环境也异常</p><h3 id="二、结论"><a href="#二、结论" class="headerlink" title="二、结论"></a>二、结论</h3><p>springboot 2.5.7版本中CloudPlatform多了Kubernetes platform的类型识别，如果使用的是内嵌的tomcat，在k8s环境中会自动添加了tomcat的RemoteIpValve，线上环境的httpHeader(x-forwarded-for)只有一个，没有代理ip信息，按RemoteIpValve的逻辑，x-forwarded-for头信息会被删除。</p><h3 id="三、排查流程"><a href="#三、排查流程" class="headerlink" title="三、排查流程"></a>三、排查流程</h3><h4 id="1、抓包看请求与现象"><a href="#1、抓包看请求与现象" class="headerlink" title="1、抓包看请求与现象"></a>1、抓包看请求与现象</h4><p>dev环境抓包</p><p><img src="http://image.nianlun.tech/2022/11/19/a30167670facd04fb59cd2cc434e458b.png" alt="image-20221119153546617"></p><p>可以看到抓包中有x-forwarded-for，但是一个内网ip</p><h4 id="2、本地调试"><a href="#2、本地调试" class="headerlink" title="2、本地调试"></a>2、本地调试</h4><p>使用develop分支本地模拟dev环境请求，debug发现可以获取到ip地址</p><h4 id="3、搜索springboot丢失x-forwarded-for的原因"><a href="#3、搜索springboot丢失x-forwarded-for的原因" class="headerlink" title="3、搜索springboot丢失x-forwarded-for的原因"></a>3、搜索springboot丢失x-forwarded-for的原因</h4><p>搜索到文章<a href="https://loveyu.org/5951.html" target="_blank" rel="noopener">https://loveyu.org/5951.html</a></p><p>看到了删除header的调用 <strong>removeHeader</strong>方法，但没有写是哪个类，搜索代码发现是内嵌tomcat的RemoteIpValve类中调用，大致看了下逻辑其中有删除header x-forwarded-for的代码，但打断点debug发现不会走到RemoteIpValve中</p><h4 id="4、查看RemoteIpValve的执行逻辑"><a href="#4、查看RemoteIpValve的执行逻辑" class="headerlink" title="4、查看RemoteIpValve的执行逻辑"></a>4、查看RemoteIpValve的执行逻辑</h4><p>查看上面文章提到的配置：server.forward-headers-strategy</p><p>通过搜索发现，是在spring的配置类org.springframework.boot.autoconfigure.web.ServerProperties中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Strategy for handling X-Forwarded-* headers.</span><br><span class="line"> */</span><br><span class="line">private ForwardHeadersStrategy forwardHeadersStrategy;</span><br></pre></td></tr></table></figure><p>get方法会在TomcatWebServerFactoryCustomizer类的getOrDeduceUseForwardHeaders方法中调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private void customizeRemoteIpValve(ConfigurableTomcatWebServerFactory factory) &#123;</span><br><span class="line">   Remoteip remoteIpProperties = this.serverProperties.getTomcat().getRemoteip();</span><br><span class="line">   String protocolHeader = remoteIpProperties.getProtocolHeader();</span><br><span class="line">   String remoteIpHeader = remoteIpProperties.getRemoteIpHeader();</span><br><span class="line">   // For back compatibility the valve is also enabled if protocol-header is set</span><br><span class="line">   if (StringUtils.hasText(protocolHeader) || StringUtils.hasText(remoteIpHeader)</span><br><span class="line">         || getOrDeduceUseForwardHeaders()) &#123;</span><br><span class="line">      RemoteIpValve valve = new RemoteIpValve();</span><br><span class="line">      valve.setProtocolHeader(StringUtils.hasLength(protocolHeader) ? protocolHeader : &quot;X-Forwarded-Proto&quot;);</span><br><span class="line">      if (StringUtils.hasLength(remoteIpHeader)) &#123;</span><br><span class="line">         valve.setRemoteIpHeader(remoteIpHeader);</span><br><span class="line">      &#125;</span><br><span class="line">      // The internal proxies default to a list of &quot;safe&quot; internal IP addresses</span><br><span class="line">      valve.setInternalProxies(remoteIpProperties.getInternalProxies());</span><br><span class="line">      try &#123;</span><br><span class="line">         valve.setHostHeader(remoteIpProperties.getHostHeader());</span><br><span class="line">      &#125;</span><br><span class="line">      catch (NoSuchMethodError ex) &#123;</span><br><span class="line">         // Avoid failure with war deployments to Tomcat 8.5 before 8.5.44 and</span><br><span class="line">         // Tomcat 9 before 9.0.23</span><br><span class="line">      &#125;</span><br><span class="line">      valve.setPortHeader(remoteIpProperties.getPortHeader());</span><br><span class="line">      valve.setProtocolHeaderHttpsValue(remoteIpProperties.getProtocolHeaderHttpsValue());</span><br><span class="line">      // ... so it&apos;s safe to add this valve by default.</span><br><span class="line">      factory.addEngineValves(valve);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private boolean getOrDeduceUseForwardHeaders() &#123;</span><br><span class="line">   if (this.serverProperties.getForwardHeadersStrategy() == null) &#123;</span><br><span class="line">      CloudPlatform platform = CloudPlatform.getActive(this.environment);</span><br><span class="line">      return platform != null &amp;&amp; platform.isUsingForwardHeaders();</span><br><span class="line">   &#125;</span><br><span class="line">   return this.serverProperties.getForwardHeadersStrategy().equals(ServerProperties.ForwardHeadersStrategy.NATIVE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getOrDeduceUseForwardHeaders方法逻辑</p><p>1、如果没有配置forwardHeadersStrategy则判断目前的环境</p><p>org.springframework.boot.cloud.CloudPlatform#getActive</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static CloudPlatform getActive(Environment environment) &#123;</span><br><span class="line">   if (environment != null) &#123;</span><br><span class="line">      for (CloudPlatform cloudPlatform : values()) &#123;</span><br><span class="line">         if (cloudPlatform.isActive(environment)) &#123;</span><br><span class="line">            return cloudPlatform;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CloudPlatform枚举类中可以看到比之前的springboot版本多了KUBERNETES的枚举，也就是在k8s环境CloudPlatform.getActive(this.environment)返回的不为空，isUsingForwardHeaders返回也为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isUsingForwardHeaders() &#123;</span><br><span class="line">   return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如果配置了则判断是否为NATIVE</p><p>新版本通过k8s环境判断getOrDeduceUseForwardHeaders方法返回true</p><p>getOrDeduceUseForwardHeaders返回为true，在customizeRemoteIpValve方法中就会添加RemoteIpValve</p><h4 id="5、为什么测试环境没事，dev和线上都有问题"><a href="#5、为什么测试环境没事，dev和线上都有问题" class="headerlink" title="5、为什么测试环境没事，dev和线上都有问题"></a>5、为什么测试环境没事，dev和线上都有问题</h4><p>通过arthus查看dev和测试环境的调用栈，发现调用栈不同</p><p>dev调用栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">`---ts=2022-11-14 20:45:50;thread_name=http-nio-8080-exec-1;id=5b;is_daemon=true;priority=5;TCCL=org.springframework.boot.loader.LaunchedURLClassLoader@3d24753a</span><br><span class="line">    `---[1.786075ms] org.apache.catalina.valves.RemoteIpValve:invoke()</span><br><span class="line">        +---[0.54% 0.009643ms ] org.apache.catalina.connector.Request:getRemoteAddr() #613</span><br><span class="line">        +---[0.17% 0.002994ms ] org.apache.catalina.connector.Request:getRemoteHost() #614</span><br><span class="line">        +---[0.19% 0.003369ms ] org.apache.catalina.connector.Request:getScheme() #615</span><br><span class="line">        +---[0.15% 0.002714ms ] org.apache.catalina.connector.Request:isSecure() #616</span><br><span class="line">        +---[0.17% 0.003068ms ] org.apache.catalina.connector.Request:getServerName() #617</span><br><span class="line">        +---[0.15% 0.002709ms ] org.apache.catalina.valves.RemoteIpValve:isChangeLocalName() #618</span><br><span class="line">        +---[0.16% 0.002895ms ] org.apache.catalina.connector.Request:getServerPort() #619</span><br><span class="line">        +---[0.22% 0.003994ms ] org.apache.catalina.connector.Request:getLocalPort() #620</span><br><span class="line">        +---[0.18% 0.00325ms ] org.apache.catalina.connector.Request:getHeader() #621</span><br><span class="line">        +---[0.16% 0.002793ms ] org.apache.catalina.connector.Request:getHeader() #622</span><br><span class="line">        +---[0.21% 0.00372ms ] org.apache.catalina.connector.Request:getHeaders() #632</span><br><span class="line">        +---[0.18% 0.003182ms ] org.apache.catalina.valves.RemoteIpValve:commaDelimitedListToStringArray() #640</span><br><span class="line">        +---[0.14% 0.002488ms ] org.apache.catalina.connector.Request:getHeader() #700</span><br><span class="line">        +---[0.13% 0.002356ms ] org.apache.catalina.connector.Request:getHeader() #716</span><br><span class="line">        +---[0.28% 0.004932ms ] org.apache.catalina.connector.Request:setAttribute() #736</span><br><span class="line">        +---[0.14% 0.002555ms ] org.apache.juli.logging.Log:isDebugEnabled() #738</span><br><span class="line">        +---[0.10% 0.001796ms ] org.apache.catalina.connector.Request:getRemoteAddr() #756</span><br><span class="line">        +---[0.15% 0.002711ms ] org.apache.catalina.connector.Request:setAttribute() #755</span><br><span class="line">        +---[0.13% 0.002321ms ] org.apache.catalina.connector.Request:getRemoteAddr() #758</span><br><span class="line">        +---[0.12% 0.002186ms ] org.apache.catalina.connector.Request:setAttribute() #757</span><br><span class="line">        +---[0.11% 0.001972ms ] org.apache.catalina.connector.Request:getRemoteHost() #760</span><br><span class="line">        +---[0.12% 0.002058ms ] org.apache.catalina.connector.Request:setAttribute() #759</span><br><span class="line">        +---[0.19% 0.003334ms ] org.apache.catalina.connector.Request:getProtocol() #762</span><br><span class="line">        +---[0.12% 0.00218ms ] org.apache.catalina.connector.Request:setAttribute() #761</span><br><span class="line">        +---[0.12% 0.002192ms ] org.apache.catalina.connector.Request:getServerName() #764</span><br><span class="line">        +---[0.12% 0.00212ms ] org.apache.catalina.connector.Request:setAttribute() #763</span><br><span class="line">        +---[0.11% 0.002021ms ] org.apache.catalina.connector.Request:getServerPort() #766</span><br><span class="line">        +---[0.14% 0.002423ms ] org.apache.catalina.connector.Request:setAttribute() #765</span><br><span class="line">        +---[0.39% 0.007047ms ] org.apache.catalina.valves.RemoteIpValve:getNext() #769</span><br><span class="line">        +---[79.19% 1.414379ms ] org.apache.catalina.Valve:invoke() #769</span><br><span class="line">        +---[0.23% 0.00409ms ] org.apache.catalina.connector.Request:setRemoteAddr() #771</span><br><span class="line">        +---[0.16% 0.002866ms ] org.apache.catalina.connector.Request:setRemoteHost() #772</span><br><span class="line">        +---[0.15% 0.002725ms ] org.apache.catalina.connector.Request:setSecure() #773</span><br><span class="line">        +---[0.20% 0.00363ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #774</span><br><span class="line">        +---[0.19% 0.003448ms ] org.apache.coyote.Request:scheme() #774</span><br><span class="line">        +---[0.14% 0.002545ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #774</span><br><span class="line">        +---[0.16% 0.002889ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #775</span><br><span class="line">        +---[0.19% 0.00342ms ] org.apache.coyote.Request:serverName() #775</span><br><span class="line">        +---[0.17% 0.00297ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #775</span><br><span class="line">        +---[0.22% 0.003904ms ] org.apache.catalina.valves.RemoteIpValve:isChangeLocalName() #776</span><br><span class="line">        +---[0.20% 0.00363ms ] org.apache.catalina.connector.Request:setServerPort() #779</span><br><span class="line">        +---[0.17% 0.003065ms ] org.apache.catalina.connector.Request:setLocalPort() #780</span><br><span class="line">        +---[0.16% 0.002877ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #782</span><br><span class="line">        +---[0.18% 0.003204ms ] org.apache.coyote.Request:getMimeHeaders() #782</span><br><span class="line">        +---[0.22% 0.003937ms ] org.apache.tomcat.util.http.MimeHeaders:removeHeader() #784</span><br><span class="line">        `---[0.17% 0.003077ms ] org.apache.tomcat.util.http.MimeHeaders:removeHeader() #790</span><br></pre></td></tr></table></figure><p>测试环境调用栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">`---ts=2022-11-14 21:02:40;thread_name=http-nio-8080-exec-5;id=aa;is_daemon=true;priority=5;TCCL=org.springframework.boot.loader.LaunchedURLClassLoader@42f85fa4</span><br><span class="line">    `---[100.85578ms] org.apache.catalina.valves.RemoteIpValve:invoke()</span><br><span class="line">        +---[0.02% 0.016252ms ] org.apache.catalina.connector.Request:getRemoteAddr() #613</span><br><span class="line">        +---[0.00% 0.002572ms ] org.apache.catalina.connector.Request:getRemoteHost() #614</span><br><span class="line">        +---[0.00% 0.001721ms ] org.apache.catalina.connector.Request:getScheme() #615</span><br><span class="line">        +---[0.00% 0.001826ms ] org.apache.catalina.connector.Request:isSecure() #616</span><br><span class="line">        +---[0.00% 0.001719ms ] org.apache.catalina.connector.Request:getServerName() #617</span><br><span class="line">        +---[0.00% 0.002139ms ] org.apache.catalina.valves.RemoteIpValve:isChangeLocalName() #618</span><br><span class="line">        +---[0.00% 0.004452ms ] org.apache.catalina.connector.Request:getServerPort() #619</span><br><span class="line">        +---[0.00% 0.002919ms ] org.apache.catalina.connector.Request:getLocalPort() #620</span><br><span class="line">        +---[0.00% 0.001888ms ] org.apache.catalina.connector.Request:getHeader() #621</span><br><span class="line">        +---[0.00% 0.003649ms ] org.apache.catalina.connector.Request:getHeader() #622</span><br><span class="line">        +---[0.00% 0.0024ms ] org.apache.catalina.connector.Request:getHeaders() #632</span><br><span class="line">        +---[0.01% 0.011289ms ] org.apache.catalina.valves.RemoteIpValve:commaDelimitedListToStringArray() #640</span><br><span class="line">        +---[0.00% 0.001824ms ] org.apache.catalina.connector.Request:setRemoteAddr() #667</span><br><span class="line">        +---[0.00% 0.001824ms ] org.apache.catalina.connector.Request:getConnector() #668</span><br><span class="line">        +---[0.00% 0.002051ms ] org.apache.catalina.connector.Connector:getEnableLookups() #668</span><br><span class="line">        +---[0.00% 0.001576ms ] org.apache.catalina.connector.Request:setRemoteHost() #682</span><br><span class="line">        +---[0.00% 0.001515ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #686</span><br><span class="line">        +---[0.00% 0.00188ms ] org.apache.coyote.Request:getMimeHeaders() #686</span><br><span class="line">        +---[0.00% 0.001862ms ] org.apache.tomcat.util.http.MimeHeaders:removeHeader() #686</span><br><span class="line">        +---[0.00% 0.004026ms ] org.apache.tomcat.util.buf.StringUtils:join() #694</span><br><span class="line">        +---[0.00% 0.001333ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #695</span><br><span class="line">        +---[0.00% 0.001517ms ] org.apache.coyote.Request:getMimeHeaders() #695</span><br><span class="line">        +---[0.00% 0.001971ms ] org.apache.tomcat.util.http.MimeHeaders:setValue() #695</span><br><span class="line">        +---[0.00% 0.001817ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #695</span><br><span class="line">        +---[0.00% 0.00168ms ] org.apache.catalina.connector.Request:getHeader() #700</span><br><span class="line">        +---[0.00% 0.003129ms ] org.apache.catalina.valves.RemoteIpValve:isForwardedProtoHeaderValueSecure() #704</span><br><span class="line">        +---[0.00% 0.001654ms ] org.apache.catalina.connector.Request:setSecure() #709</span><br><span class="line">        +---[0.00% 0.001344ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #710</span><br><span class="line">        +---[0.00% 0.002058ms ] org.apache.coyote.Request:scheme() #710</span><br><span class="line">        +---[0.00% 0.001186ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #710</span><br><span class="line">        +---[0.00% 0.002904ms ] org.apache.catalina.valves.RemoteIpValve:setPorts() #711</span><br><span class="line">        +---[0.00% 0.001491ms ] org.apache.catalina.connector.Request:getHeader() #716</span><br><span class="line">        +---[0.00% 0.003306ms ] org.apache.tomcat.util.http.parser.Host:parse() #719</span><br><span class="line">        +---[0.00% 0.001296ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #725</span><br><span class="line">        +---[0.00% 0.001337ms ] org.apache.coyote.Request:serverName() #725</span><br><span class="line">        +---[0.00% 0.001271ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #725</span><br><span class="line">        +---[0.00% 0.001253ms ] org.apache.catalina.valves.RemoteIpValve:isChangeLocalName() #726</span><br><span class="line">        +---[0.00% 0.003314ms ] org.apache.catalina.connector.Request:setAttribute() #736</span><br><span class="line">        +---[0.02% 0.015683ms ] org.apache.juli.logging.Log:isDebugEnabled() #738</span><br><span class="line">        +---[0.00% 0.00135ms ] org.apache.catalina.connector.Request:getRemoteAddr() #756</span><br><span class="line">        +---[0.00% 0.001719ms ] org.apache.catalina.connector.Request:setAttribute() #755</span><br><span class="line">        +---[0.00% 0.001249ms ] org.apache.catalina.connector.Request:getRemoteAddr() #758</span><br><span class="line">        +---[0.00% 0.001294ms ] org.apache.catalina.connector.Request:setAttribute() #757</span><br><span class="line">        +---[0.00% 0.00128ms ] org.apache.catalina.connector.Request:getRemoteHost() #760</span><br><span class="line">        +---[0.00% 0.001485ms ] org.apache.catalina.connector.Request:setAttribute() #759</span><br><span class="line">        +---[0.00% 0.002571ms ] org.apache.catalina.connector.Request:getProtocol() #762</span><br><span class="line">        +---[0.00% 0.001857ms ] org.apache.catalina.connector.Request:setAttribute() #761</span><br><span class="line">        +---[0.01% 0.008126ms ] org.apache.catalina.connector.Request:getServerName() #764</span><br><span class="line">        +---[0.00% 0.001972ms ] org.apache.catalina.connector.Request:setAttribute() #763</span><br><span class="line">        +---[0.00% 0.001452ms ] org.apache.catalina.connector.Request:getServerPort() #766</span><br><span class="line">        +---[0.00% 0.001782ms ] org.apache.catalina.connector.Request:setAttribute() #765</span><br><span class="line">        +---[0.00% 0.001442ms ] org.apache.catalina.valves.RemoteIpValve:getNext() #769</span><br><span class="line">        +---[99.65% 100.500217ms ] org.apache.catalina.Valve:invoke() #769</span><br><span class="line">        +---[0.00% 0.002653ms ] org.apache.catalina.connector.Request:setRemoteAddr() #771</span><br><span class="line">        +---[0.00% 0.001491ms ] org.apache.catalina.connector.Request:setRemoteHost() #772</span><br><span class="line">        +---[0.00% 0.00171ms ] org.apache.catalina.connector.Request:setSecure() #773</span><br><span class="line">        +---[0.00% 0.001662ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #774</span><br><span class="line">        +---[0.00% 0.00229ms ] org.apache.coyote.Request:scheme() #774</span><br><span class="line">        +---[0.00% 0.001822ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #774</span><br><span class="line">        +---[0.00% 0.00142ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #775</span><br><span class="line">        +---[0.00% 0.002272ms ] org.apache.coyote.Request:serverName() #775</span><br><span class="line">        +---[0.00% 0.001255ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #775</span><br><span class="line">        +---[0.00% 0.002824ms ] org.apache.catalina.valves.RemoteIpValve:isChangeLocalName() #776</span><br><span class="line">        +---[0.00% 0.001433ms ] org.apache.catalina.connector.Request:setServerPort() #779</span><br><span class="line">        +---[0.00% 0.001558ms ] org.apache.catalina.connector.Request:setLocalPort() #780</span><br><span class="line">        +---[0.00% 0.001666ms ] org.apache.catalina.connector.Request:getCoyoteRequest() #782</span><br><span class="line">        +---[0.00% 0.001526ms ] org.apache.coyote.Request:getMimeHeaders() #782</span><br><span class="line">        +---[0.00% 0.002167ms ] org.apache.tomcat.util.http.MimeHeaders:removeHeader() #784</span><br><span class="line">        +---[0.00% 0.002147ms ] org.apache.tomcat.util.http.MimeHeaders:setValue() #792</span><br><span class="line">        `---[0.00% 0.001765ms ] org.apache.tomcat.util.buf.MessageBytes:setString() #792</span><br></pre></td></tr></table></figure><p>对比代码发现dev环境的确执行了删除header的操作</p><p>仔细探究RemoteIpValve代码逻辑</p><p>和目前问题相关的大致功能为：解析X-Forwarded-for请求头，将其中的远端地址设置到RemoteAddr中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">简单解释X-Forwarded-For的作用</span><br><span class="line"></span><br><span class="line">例如真正的用户客户端是Client1，通过代理服务器proxy1，proxy2，到达服务器，在Tomcat中执行获取客户端地址的方法：request.getRemoteAddr，获得的IP地址是proxy2的，也就是负载均衡的地址；</span><br><span class="line"></span><br><span class="line">而如果你想要获取Client1的地址，也是可以获取到的，就是通过X-Forwarded-For字段；</span><br><span class="line">X-Forwarded-For:简称XFF头，它代表客户端，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。</span><br><span class="line">X-Forwarded-For内置在Http协议头中，刚刚的场景X-Forwarded-For取值为：client1, proxy1, proxy2</span><br></pre></td></tr></table></figure><p>具体逻辑为：</p><p>对于列表中的每个ip，如果属于内网地址则跳过，否则将此ip设置为远程ip，停止循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最近一跳代理地址</span></span><br><span class="line"><span class="keyword">final</span> String originalRemoteAddr = request.getRemoteAddr();</span><br><span class="line">...</span><br><span class="line"><span class="comment">//X-Forwarded-For头信息</span></span><br><span class="line"><span class="keyword">final</span> String originalRemoteIpHeader = request.getHeader(remoteIpHeader);</span><br><span class="line"><span class="comment">//最近一跳代理地址是否为内网</span></span><br><span class="line"><span class="comment">// 内网正则判断为 Pattern internalProxies = Pattern.compile(</span></span><br><span class="line">        <span class="string">"10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|"</span> +</span><br><span class="line">        <span class="string">"192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|"</span> +</span><br><span class="line">        <span class="string">"169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|"</span> +</span><br><span class="line">        <span class="string">"127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|"</span> +</span><br><span class="line">        <span class="string">"172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|"</span> +</span><br><span class="line">        <span class="string">"172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|"</span> +</span><br><span class="line">        <span class="string">"172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|"</span> +</span><br><span class="line">        <span class="string">"0:0:0:0:0:0:0:1|::1"</span>);</span><br><span class="line"><span class="comment">//originalRemoteAddr 所有环境都为内网地址，返回true</span></span><br><span class="line"><span class="keyword">boolean</span> isInternal = internalProxies != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        internalProxies.matcher(originalRemoteAddr).matches();</span><br><span class="line"><span class="comment">//trustedProxies为空</span></span><br><span class="line"><span class="keyword">if</span> (isInternal || (trustedProxies != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        trustedProxies.matcher(originalRemoteAddr).matches())) &#123;</span><br><span class="line">    String remoteIp = <span class="keyword">null</span>;</span><br><span class="line">    Deque&lt;String&gt; proxiesHeaderValue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    StringBuilder concatRemoteIpHeaderValue = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (Enumeration&lt;String&gt; e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) &#123;</span><br><span class="line">        <span class="keyword">if</span> (concatRemoteIpHeaderValue.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            concatRemoteIpHeaderValue.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        concatRemoteIpHeaderValue.append(e.nextElement());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//X-Forwarded-For内的地址转换为数组</span></span><br><span class="line">    String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="keyword">if</span> (!isInternal) &#123;</span><br><span class="line">        proxiesHeaderValue.addFirst(originalRemoteAddr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从最后的地址循环</span></span><br><span class="line">    <span class="keyword">for</span> (idx = remoteIpHeaderValue.length - <span class="number">1</span>; idx &gt;= <span class="number">0</span>; idx--) &#123;</span><br><span class="line">        String currentRemoteIp = remoteIpHeaderValue[idx];</span><br><span class="line">        remoteIp = currentRemoteIp;</span><br><span class="line">        <span class="comment">//如果是内网地址则跳过</span></span><br><span class="line">        <span class="keyword">if</span> (internalProxies !=<span class="keyword">null</span> &amp;&amp; internalProxies.matcher(currentRemoteIp).matches()) &#123;</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//trustedProxies目前配置为空</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (trustedProxies != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                trustedProxies.matcher(currentRemoteIp).matches()) &#123;</span><br><span class="line">            proxiesHeaderValue.addFirst(currentRemoteIp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//找到第一个不是内网地址的idx，但如果只有一个地址，则idx会变成负数</span></span><br><span class="line">            idx--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新构建客户端地址的list，但idx必须不小于0</span></span><br><span class="line">    LinkedList&lt;String&gt; newRemoteIpHeaderValue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (; idx &gt;= <span class="number">0</span>; idx--) &#123;</span><br><span class="line">        String currentRemoteIp = remoteIpHeaderValue[idx];</span><br><span class="line">        newRemoteIpHeaderValue.addFirst(currentRemoteIp);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">...</span><br><span class="line">    <span class="comment">//如果newRemoteIpHeaderValue为空则删除X-Forwarded-For</span></span><br><span class="line">    <span class="keyword">if</span> (newRemoteIpHeaderValue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">         request.getCoyoteRequest().getMimeHeaders().removeHeader(remoteIpHeader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结一下逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For中的地址集合从后往前取，在至少有两个地址并且，最后的地址是内网地址的情况下不会删除X-Forwarded-For请求头</span><br></pre></td></tr></table></figure><p>看一下dev、test、线上的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//test环境 172.31.0.203为内网地址</span><br><span class="line">X-Forwarded-For: 203.187.160.86, 100.117.125.137, 172.31.0.203</span><br><span class="line">//dev环境172.30.1.118为内网地址</span><br><span class="line">X-Forwarded-For: 172.30.1.118</span><br><span class="line">//线上环境 117.136.68.19为外网地址，但只有一个ip，没有代理的地址</span><br><span class="line">X-Forwarded-For: 117.136.68.19</span><br></pre></td></tr></table></figure><p>所以dev和线上会被删去请求头</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>在wb-base-component-starter中添加公共配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">    forward-headers-strategy: none</span><br></pre></td></tr></table></figure><p>不加载tomcat的RemoteIpValve</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、现象&quot;&gt;&lt;a href=&quot;#一、现象&quot; class=&quot;headerlink&quot; title=&quot;一、现象&quot;&gt;&lt;/a&gt;一、现象&lt;/h3&gt;&lt;p&gt;springboot从2.0.2升级到 2.5.7后线上环境无法通过request.getHeader(“x-forward
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
      <category term="springboot" scheme="http://qlql489.github.io/tags/springboot/"/>
    
      <category term="问题排查" scheme="http://qlql489.github.io/tags/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>TransmittableThreadLocal的错误用法</title>
    <link href="http://qlql489.github.io/2020/08/10/TransmittableThreadLocal%E7%9A%84%E9%94%99%E8%AF%AF%E7%94%A8%E6%B3%95/"/>
    <id>http://qlql489.github.io/2020/08/10/TransmittableThreadLocal的错误用法/</id>
    <published>2020-08-10T00:02:18.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.nianlun.tech/2022/02/16/54d1e01e7fdce6b99fe5291f657fe29e.jpg" alt="pexels-this-is-zun-1194036"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ThreadLocal能够在单个线程中传递参数，使用可以用在系统参数的传递或者在链路跟踪中传递trace相关信息，需要说明的是单单使用ThreadLocal是不会出现ThreadLocal值线程共享的，但仅仅使用ThreadLocal还不够，如果代码中有使用异步，ThreadLocal就无能为力了，这时可以使用JDK自带的InheritableThreadLocal，这次ThreadLocal变量线程共享，就是因为使用了InheritableThreadLocal。</p><p>我们的项目使用springboot构建，想使用ThreadLocal来完成透传系统参数，这样所有接口和方法都不要显式的传递次参数，刚刚说到ThreadLocal无法解决异步传递问题，InheritableThreadLocal也只能解决新建线程的情况，无法在线程池的场景中使用，具体原因下次分析，经过调研我们使用阿里开源的TransmittableThreadLocal </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们先来看这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransmittableThreadLocalUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TransmittableThreadLocalUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TransmittableThreadLocal&lt;Map&lt;String, Object&gt;&gt; threadLocal = <span class="keyword">new</span> TransmittableThreadLocal() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HashMap(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"get &#123;&#125;"</span>,key);</span><br><span class="line">        Map map = (Map)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        Map map = (Map)threadLocal.get();</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Map map = (Map)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.remove(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用阿里的TransmittableThreadLocal封装了一个工具类，初始化一个map，有get、set、remove方法，其他方法省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testLocal2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    logger.info(<span class="string">"testLocal2 get "</span>+ TransmittableThreadLocalUtil.get(<span class="string">"test"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testLocal3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TransmittableThreadLocalUtil.set(<span class="string">"test"</span>,<span class="string">"200"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个接口，一个设置test为200，另一个方法获取，springboot默认使用tomcat作为容器，我们知道tomcat在处理请求时使用了线程池，理论上2个接口的调用不会是同一个线程，我们看log输出可以确认：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">09</span> <span class="number">22</span>:<span class="number">59</span>:<span class="number">36.765</span>  INFO <span class="number">86354</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] c.j.controller.ThreadLocalController     : testLocal3 test set <span class="number">200</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">09</span> <span class="number">22</span>:<span class="number">59</span>:<span class="number">37.755</span>  INFO <span class="number">86354</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">2</span>] c.j.controller.ThreadLocalController     : testLocal2 get <span class="number">200</span></span><br></pre></td></tr></table></figure><p>先调用了/testLocal3接口线程名称是nio-8080-exec-2，再调用了/testLocal2，线程名称是nio-8080-exec-1，是两个线程</p><p>但是通过log可以看到第二个线程居然取到了第一个线程设置的ThreadLocal变量，这是怎么回事？ThreadLocal不是线程隔离的吗？</p><p>上面只是用一个小例子帮助大家理解，实际中我们使用拦截器在方法调用前获取系统参数放入ThreadLocal中，在调用结束时清理ThreadLocal变量，但因为同样有上面例子中的问题，我们的一此请求没结束时可能ThreadLocal中的值就被别的线程清理的，导致业务异常。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这到底是什么原因导致的呢，在翻看了TransmittableThreadLocal的源码以及项目中的使用方式后找到了原因。</p><p>TransmittableThreadLocal继承自jdk的<strong>InheritableThreadLocal</strong>，而<strong>InheritableThreadLocal</strong>的原理是父线程创建子线程时会将父线程的ThreadLocalMap复制到子线程中，这个复制是引用复制，也就是说子线程可以修改父线程ThreadLocal中的变量，但这也解释不了为什么ThreadLoal会线程共享，tomcat线程池中的线程都是子线程啊，那只可能是父线程出现了问题，再看一下项目代码，找到了原因。</p><p>因为在service的静态变量中使用了TransmittableThreadLocalUtil的get方法初始化了那个map，而springboot在加载service时使用的是main主线程，是所有线程的父线程，导致所有的子线程通过TransmittableThreadLocal获取的Map是同一个引用，当然是线程共享了！</p><p>例子中的service示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态变量的调用</span></span><br><span class="line">    <span class="keyword">private</span> String value = TransmittableThreadLocalUtil.get(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get方法中有log，再看一眼启动log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">09</span> <span class="number">22</span>:<span class="number">59</span>:<span class="number">24.104</span>  INFO <span class="number">86354</span> --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in <span class="number">2164</span> ms</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">09</span> <span class="number">22</span>:<span class="number">59</span>:<span class="number">24.202</span>  INFO <span class="number">86354</span> --- [           main] c.j.util.TransmittableThreadLocalUtil    : get test</span><br><span class="line"><span class="number">2020</span>-<span class="number">08</span>-<span class="number">09</span> <span class="number">22</span>:<span class="number">59</span>:<span class="number">24.808</span>  INFO <span class="number">86354</span> --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService</span><br></pre></td></tr></table></figure><p>日志第二行，main线程调用了TransmittableThreadLocalUtil，确定了推断。</p><p>其中一种解决方式是在TransmittableThreadLocalUtil的初始化TransmittableThreadLocal对象时复写childValue方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TransmittableThreadLocal&lt;Map&lt;String, Object&gt;&gt; threadLocal = <span class="keyword">new</span> TransmittableThreadLocal() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HashMap(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">childValue</span><span class="params">(Object parentValue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(parentValue <span class="keyword">instanceof</span> Map)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;&gt;((Map)parentValue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parentValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、ThreadLocal不会出现线程间共享的情况。 </p><p>2、InheritableThreadLocal的原理是新建子线程时将父线程ThreadLocal复制到子线程中，是引用复制，会导致父子线程都能操作那个引用。</p><p>3、问题不是TransmittableThreadLocal引起的，是因为错误使用了InheritableThreadLocal，TransmittableThreadLocal只是继承自InheritableThreadLocal。</p><p>为什么复写<code>childValue</code>方法就可以解决呢，ThreadLocal有没有别的坑，InheritableThreadLocal以及ThreadLocal中相关的源码是如何处理的呢，期待下一篇吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://image.nianlun.tech/2022/02/16/54d1e01e7fdce6b99fe5291f657fe29e.jpg&quot; alt=&quot;pexels-this-is-zun-1194036&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
      <category term="线程" scheme="http://qlql489.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>AQS原理解析（三、condition原理）</title>
    <link href="http://qlql489.github.io/2020/03/01/AQS%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%E3%80%81condition%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>http://qlql489.github.io/2020/03/01/AQS原理解析（三、condition原理）/</id>
    <published>2020-03-01T13:44:19.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.nianlun.tech/2022/02/16/3268df139bfcd085d1c25b09df4beef6.jpg" alt="pexels-markus-winkler-3828944"></p><h3 id="condition的作用"><a href="#condition的作用" class="headerlink" title="condition的作用"></a>condition的作用</h3><p>condition的使用场景其实很多，涉及到条件判断的并发场景都可以用到，比如： </p><ul><li>阻塞队列的ArrayBlockingQueue中做队列满和空的条件判断</li><li>CyclicBarrier中做阻塞与唤醒所有线程的判断</li><li>DelayQueue中的阻塞获取队列数据的判断</li><li>线程池ThreadPoolExecutor中awaitTermination方法的条件判断</li></ul><p>condition怎么用呢？</p><p>在使用synchronized时我们可以使用wait()、notify()、notifyAll()方法来调度线程，而condition提供了类似的方法：wait(),signal(),signalAll的功能，并且能够更加精细的控制等待的范围，像上面所说，jdk中使用了很多ReentrantLock和condition的配合来实现线程调度</p><p>我们看一个conditon最常见的使用方式：生产消费者的模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">public class ConditionTest &#123;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;String&gt; lists = new LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Lock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    //集合是否满的条件判断</span><br><span class="line">    Condition fullCondition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    //集合是否空的条件判断</span><br><span class="line">    Condition emptyCondition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    //生产者</span><br><span class="line">    private void product()&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            //假如集合大小为10</span><br><span class="line">            while (lists.size() == 10)&#123;</span><br><span class="line">                System.out.println(&quot;list is full&quot;);</span><br><span class="line">                fullCondition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            //生产一个5位的随机字符串</span><br><span class="line">            String randomString = getRandomString(5);</span><br><span class="line">            lists.add(randomString);</span><br><span class="line">            System.out.println(String.format(&quot;product %s size %d  %s&quot;,randomString,lists.size(),Thread.currentThread().getName()));</span><br><span class="line">            //通知消费者可以消费了</span><br><span class="line">            emptyCondition.signalAll();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //消费者</span><br><span class="line">    private String consume()&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try&#123;</span><br><span class="line">            while (lists.size() == 0)&#123;</span><br><span class="line">                System.out.println(&quot;list is empty&quot;);</span><br><span class="line">                emptyCondition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            String first = lists.removeFirst();</span><br><span class="line">            //通知生产者可以生产了</span><br><span class="line">            fullCondition.signalAll();</span><br><span class="line">            return first;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 生成随机字符串</span><br><span class="line">     * @param length</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getRandomString(int length)&#123;</span><br><span class="line">        String str=&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;</span><br><span class="line">        Random random=new Random();</span><br><span class="line">        StringBuffer sb=new StringBuffer();</span><br><span class="line">        for(int i=0;i&lt;length;i++)&#123;</span><br><span class="line">            int number=random.nextInt(62);</span><br><span class="line">            sb.append(str.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        ConditionTest test = new ConditionTest();</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        //线程个数控制消费的快还是生产的快</span><br><span class="line">        for(int i = 0;i&lt;2;i++)&#123;</span><br><span class="line"></span><br><span class="line">            executorService.submit(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">                while (true)&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(500);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    test.product();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int k = 0;k&lt;1;k++)&#123;</span><br><span class="line">            executorService.submit(()-&gt;&#123;</span><br><span class="line">                System.out.println(&quot;cousumestart&quot;);</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(500);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    String consume = test.consume();</span><br><span class="line">                    System.out.println(&quot;consume &quot; + consume+ &quot; &quot;+Thread.currentThread().getName() );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //等待输入，阻塞主线程不退出</span><br><span class="line">        try &#123;</span><br><span class="line">            new BufferedReader(new InputStreamReader(System.in)).readLine();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//部分输出日志</span><br><span class="line">product qeV0r size 7  pool-1-thread-1</span><br><span class="line">product xEUkA size 8  pool-1-thread-2</span><br><span class="line">consume P5Je1 pool-1-thread-3</span><br><span class="line">product rQS1D size 8  pool-1-thread-1</span><br><span class="line">product QcEtf size 9  pool-1-thread-2</span><br><span class="line">consume 2q7Fc pool-1-thread-3</span><br><span class="line">product Z5rBg size 9  pool-1-thread-1</span><br><span class="line">consume UBxBD pool-1-thread-3</span><br><span class="line">product Tr5q2 size 9  pool-1-thread-2</span><br><span class="line">product HXBdE size 10  pool-1-thread-1</span><br><span class="line">list is full</span><br><span class="line">consume aYDNR pool-1-thread-3</span><br><span class="line">product ukjnk size 10  pool-1-thread-2</span><br><span class="line">list is full</span><br><span class="line">consume LBEdA pool-1-thread-3</span><br><span class="line">product iK28H size 10  pool-1-thread-2</span><br><span class="line">list is full</span><br><span class="line">list is full</span><br></pre></td></tr></table></figure><p>可以看到生产者线程有2个，消费者线程有1个，生产和消费的速度相同，用Thread.sleep控制，<br>生产速度大于消费速度，最后集合元素到10个的时候生产者调用<code>fullCondition.await();</code>阻塞，只有消费者消费后通过<code>fullCondition.signalAll();</code>通知生产者继续生产</p><p>同理添加消费者线程数，使消费的速度快与生产，则集合为空时会调用<code>emptyCondition.await();</code>阻塞，生产者生产后回调用<code>emptyCondition.signalAll();</code>通知消费者继续生产</p><p>相较于对象的wait()、notifyAll()方法不同的条件分开判断，颗粒度更小一些，唤醒的线程范围更精准</p><p>再看一下ArrayBlockingQueue的一个例子，在一段时间内阻塞获取队列数据，取不到则返回空：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public E poll(long timeout, TimeUnit unit) throws InterruptedException &#123;</span><br><span class="line">      long nanos = unit.toNanos(timeout);</span><br><span class="line">      final ReentrantLock lock = this.lock;</span><br><span class="line">      lock.lockInterruptibly();</span><br><span class="line">      try &#123;</span><br><span class="line">          while (count == 0) &#123;</span><br><span class="line">              if (nanos &lt;= 0)</span><br><span class="line">                  return null;</span><br><span class="line">              //notEmpty 是lock new出来的一个condition</span><br><span class="line">              nanos = notEmpty.awaitNanos(nanos);</span><br><span class="line">          &#125;</span><br><span class="line">          return dequeue();</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>condition的使用场景还多，下面我们就一起看看condition的实现原理吧，首先condition需要在AbstractQueuedSynchronizer实现类的</p><h3 id="condition原理解析"><a href="#condition原理解析" class="headerlink" title="condition原理解析"></a>condition原理解析</h3><p>我们知道AQS中维护了一个队列来控制线程的执行，condition中使用了另一个等待队列来实现条件的判断，condition必须在aqs的acquire获取锁后使用，调用condition.await()方法将添加一个node到条件队列中，在调用signal()或signalAll()后将此节点移出condition的等待队列放到锁的等待队列中去竞争锁，取到锁后继续执行后续逻辑。</p><hr><p>condition有以下几个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将等待时间最长的线程从condition等待队列放到锁的等待队列中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//将所有等待线程从condition等待队列放到锁的等待队列中</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signalAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//condition的等待方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span></span><br><span class="line"><span class="function"><span class="comment">//不可中断的wait</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">awaitUninterruptibly</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//几个有时间参数的wait方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">awaitNanos</span><span class="params">(<span class="keyword">long</span> nanosTimeout)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">awaitUntil</span><span class="params">(Date deadline)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><h4 id="先看一下最主要的await方法"><a href="#先看一下最主要的await方法" class="headerlink" title="先看一下最主要的await方法"></a>先看一下最主要的await方法</h4><p>AbstractQueuedSynchronizer.ConditionObject#await()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">//如果当前线程被中断了抛出InterruptedException</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    Node node = addConditionWaiter();<span class="comment">//（1）</span></span><br><span class="line">    <span class="keyword">int</span> savedState = fullyRelease(node);<span class="comment">//(2)</span></span><br><span class="line">    <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;<span class="comment">//(3)</span></span><br><span class="line">      <span class="comment">//挂起线程</span></span><br><span class="line">        LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">      <span class="comment">//中断情况的判断</span></span><br><span class="line">        <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//被唤醒后去抢锁，抢到后继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">        interruptMode = REINTERRUPT;</span><br><span class="line">    <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>) <span class="comment">// clean up if cancelled</span></span><br><span class="line">        unlinkCancelledWaiters();</span><br><span class="line">     <span class="comment">//如果阻塞中发生了中断，则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</span><br><span class="line">        reportInterruptAfterWait(interruptMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（1）addConditionWaiter"><a href="#（1）addConditionWaiter" class="headerlink" title="（1）addConditionWaiter"></a>（1）addConditionWaiter</h5><p>在condition等待队列尾部加入一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addConditionWaiter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         Node t = lastWaiter;</span><br><span class="line">         <span class="comment">// 如果最后一个节点不是condition状态（被取消状态）被取消状态是在fullyReleas方法中产生的</span></span><br><span class="line">         <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</span><br><span class="line">             <span class="comment">//从头节点开始将被取消或者超时的节点移出队列</span></span><br><span class="line">             unlinkCancelledWaiters();</span><br><span class="line">             t = lastWaiter;</span><br><span class="line">         &#125;</span><br><span class="line">         Node node = <span class="keyword">new</span> Node(Thread.currentThread(), Node.CONDITION);</span><br><span class="line">       <span class="comment">//队列为空的情况  </span></span><br><span class="line">     <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">             firstWaiter = node;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">           <span class="comment">//插入尾节点</span></span><br><span class="line">             t.nextWaiter = node;</span><br><span class="line">         lastWaiter = node;</span><br><span class="line">         <span class="keyword">return</span> node;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h5 id="（2）fullyRelease"><a href="#（2）fullyRelease" class="headerlink" title="（2）fullyRelease"></a>（2）fullyRelease</h5><p>能调用wait方法说明已经获取到锁了，fullyRelease方法就是提前调用解锁方法，将自己从lock的队列中移出，并返回当前节点的状态savedState，这里如果释放失败说明当前线程不在持有锁，状态错误，将节点设置成CANCELLED状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullyRelease</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> savedState = getState();</span><br><span class="line">        <span class="keyword">if</span> (release(savedState)) &#123;</span><br><span class="line">            failed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> savedState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            node.waitStatus = Node.CANCELLED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>release方法调用tryRelease释放锁并唤醒首节点，在ReentrantLock的实现中tryRelease会判断当前线程是否获取锁，所以在lock方法范围内使用condition会报IllegalMonitorStateException异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">          Node h = head;</span><br><span class="line">          <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">              unparkSuccessor(h);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="（3）isOnSyncQueue"><a href="#（3）isOnSyncQueue" class="headerlink" title="（3）isOnSyncQueue"></a>（3）isOnSyncQueue</h5><p>回到await方法，循环调用isOnSyncQueue判断是否在锁的等待队列中(注意不是condition的等待队列)，不在锁的等待队列中则调用<code>LockSupport.park(this)</code>挂起线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isOnSyncQueue</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (node.next != <span class="keyword">null</span>) <span class="comment">// If has successor, it must be on queue</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> findNodeFromTail(node);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="awaitNanos方法"><a href="#awaitNanos方法" class="headerlink" title="awaitNanos方法"></a>awaitNanos方法</h4><p>大致逻辑和await相同，就是多了一个时间的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">awaitNanos</span><span class="params">(<span class="keyword">long</span> nanosTimeout)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    Node node = addConditionWaiter();</span><br><span class="line">    <span class="keyword">int</span> savedState = fullyRelease(node);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> deadline = System.nanoTime() + nanosTimeout;</span><br><span class="line">    <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line">    <span class="comment">//如果时间小于0，直接从condition队列</span></span><br><span class="line">        <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">            transferAfterCancelledWait(node);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果大于自旋的阈值则使用parkNanos设置线程挂起的时间，否则继续自旋</span></span><br><span class="line">        <span class="keyword">if</span> (nanosTimeout &gt;= spinForTimeoutThreshold)</span><br><span class="line">            LockSupport.parkNanos(<span class="keyword">this</span>, nanosTimeout);</span><br><span class="line">        <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        nanosTimeout = deadline - System.nanoTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">        interruptMode = REINTERRUPT;</span><br><span class="line">    <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>)</span><br><span class="line">        unlinkCancelledWaiters();</span><br><span class="line">    <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</span><br><span class="line">        reportInterruptAfterWait(interruptMode);</span><br><span class="line">    <span class="keyword">return</span> deadline - System.nanoTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="signal-方法"><a href="#signal-方法" class="headerlink" title="signal()方法"></a>signal()方法</h4><p>signal的作用是将condition队列中等待时间最长的node转移到锁队列末尾，去重新抢锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//有不同的实现，ReentrantLock中是判断持有锁的是否当前线程</span></span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    Node first = firstWaiter;</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">        doSignal(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="doSignal"><a href="#doSignal" class="headerlink" title="doSignal"></a>doSignal</h5><p>将condition中等待时间最长的节点调用transferForSignal方法放到锁队列中，循环调用是要寻找第一个不是cancelled状态的节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">       </span><br><span class="line">private void doSignal(Node first) &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        if ( (firstWaiter = first.nextWaiter) == null)</span><br><span class="line">            lastWaiter = null;</span><br><span class="line">        first.nextWaiter = null;</span><br><span class="line">    &#125; while (!transferForSignal(first) &amp;&amp;</span><br><span class="line">             (first = firstWaiter) != null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="doSignalAll"><a href="#doSignalAll" class="headerlink" title="doSignalAll"></a>doSignalAll</h5><p>doSignalAll是将所有等待队列中的节点放到锁队列末尾<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">       </span><br><span class="line">private void doSignalAll(Node first) &#123;</span><br><span class="line">    lastWaiter = firstWaiter = null;</span><br><span class="line">    do &#123;</span><br><span class="line">        Node next = first.nextWaiter;</span><br><span class="line">        first.nextWaiter = null;</span><br><span class="line">        transferForSignal(first);</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; while (first != null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="transferForSignal"><a href="#transferForSignal" class="headerlink" title="transferForSignal"></a>transferForSignal</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">final boolean transferForSignal(Node node) &#123;</span><br><span class="line">  </span><br><span class="line">    //cas设置节点为0状态，如果失败说明节点已经被取消了</span><br><span class="line">    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))</span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Splice onto queue and try to set waitStatus of predecessor to</span><br><span class="line">     * indicate that thread is (probably) waiting. If cancelled or</span><br><span class="line">     * attempt to set waitStatus fails, wake up to resync (in which</span><br><span class="line">     * case the waitStatus can be transiently and harmlessly wrong).</span><br><span class="line">     */</span><br><span class="line">    //添加到锁队列中</span><br><span class="line">    Node p = enq(node);</span><br><span class="line">    int ws = p.waitStatus;</span><br><span class="line">    //cancelled状态或者设置SIGNAL状态失败则唤醒此线程</span><br><span class="line">    if (ws &gt; 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</span><br><span class="line">        LockSupport.unpark(node.thread);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>condition中有很多线程与中断的细节处理，有兴趣的可以自己去看看源码</p><p>总结一下：</p><ul><li>condition必须使用在lock中</li><li>condition提供了类似object.wait和notify的通信机制，但支持多个条件队列，使用上更灵活</li><li>condition的原理流程如下<ul><li>线程1获取锁</li><li>线程1调用condition.await()进入condition等待队列并阻塞，释放锁给别的线程</li><li>线程2获取锁，调用condition.signal，将condition等待队列中的线程1所在的node放在锁的等待队列中竞争锁</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://image.nianlun.tech/2022/02/16/3268df139bfcd085d1c25b09df4beef6.jpg&quot; alt=&quot;pexels-markus-winkler-3828944&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;con
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
      <category term="并发" scheme="http://qlql489.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AQS原理解析（二、共享模式）</title>
    <link href="http://qlql489.github.io/2018/11/18/AQS%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%E3%80%81%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://qlql489.github.io/2018/11/18/AQS原理解析（二、共享模式）/</id>
    <published>2018-11-18T19:30:31.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.nianlun.tech/2021/12/14/c4513f4589b937a9b2afd62e021a6b86.jpg" alt="pexels-monstera-6621468"></p><p>上一篇介绍了AQS独占模式的原理，参考链接<a href="http://blog.nianlun.tech/2018/10/28/AQS%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">AQS原理解析（一）</a>，这篇介绍一下AQS的共享模式如何实现的。</p><h3 id="共享模式可以做什么"><a href="#共享模式可以做什么" class="headerlink" title="共享模式可以做什么"></a>共享模式可以做什么</h3><p>java concurrent包中的很多阻塞类可以一次控制多个线程的挂起和唤醒，比如<code>Semaphore</code>、<code>CountDownLatch</code>,<br>他们内部都继承了AQS并实现了<code>tryAcquireShared</code>,<code>tryReleaseShared</code>方法</p><h3 id="共享模式逻辑"><a href="#共享模式逻辑" class="headerlink" title="共享模式逻辑"></a>共享模式逻辑</h3><p>线程调用<code>acquireShared</code>方法获取锁<br>如果失败则创建共享类型的节点放入FIFO队列，等待唤醒<br>有线程释放锁后唤醒队列最前端的节点，然后唤醒所有后面的共享节点</p><h3 id="AQS-acquireShared方法"><a href="#AQS-acquireShared方法" class="headerlink" title="AQS acquireShared方法"></a>AQS acquireShared方法</h3><p>acquireShared方法是AQS共享模式的入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Acquires in shared mode, ignoring interrupts.  Implemented by</span></span><br><span class="line"><span class="comment"> * first invoking at least once &#123;<span class="doctag">@link</span> #tryAcquireShared&#125;,</span></span><br><span class="line"><span class="comment"> * returning on success.  Otherwise the thread is queued, possibly</span></span><br><span class="line"><span class="comment"> * repeatedly blocking and unblocking, invoking &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * #tryAcquireShared&#125; until success.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arg the acquire argument.  This value is conveyed to</span></span><br><span class="line"><span class="comment"> *        &#123;<span class="doctag">@link</span> #tryAcquireShared&#125; but is otherwise uninterpreted</span></span><br><span class="line"><span class="comment"> *        and can represent anything you like.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取共享锁，小于0则放入队列，挂起线程</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用<code>tryAcquireShared</code>小于零后调用<code>doAcquireShared</code></p><h3 id="doAcquireShared"><a href="#doAcquireShared" class="headerlink" title="doAcquireShared"></a>doAcquireShared</h3><p>这个方法和独占模式的acquireQueued方法差不多，流程就是</p><ol><li>在队列尾部添加共享模式节点</li><li>前一个节点如果是head并且tryAcquireShared&gt;=0则替换当前节点为head,并唤醒后面所有共享模式节点</li><li>如果前一个节点不是head，则挂起当前线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Acquires in shared uninterruptible mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arg the acquire argument</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//和独占模式相同，在尾部添加节点，不过是设置成共享模式</span></span><br><span class="line">    <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">//获取前一个节点</span></span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                <span class="comment">//尝试获取共享锁</span></span><br><span class="line">                <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//和独占模式不同的地方，会唤醒后面的共享节点</span></span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    <span class="keyword">if</span> (interrupted)</span><br><span class="line">                        selfInterrupt();</span><br><span class="line">                    failed = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//挂起，具体可以看上一篇</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setHeadAndPropagate方法"><a href="#setHeadAndPropagate方法" class="headerlink" title="setHeadAndPropagate方法"></a>setHeadAndPropagate方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets head of queue, and checks if successor may be waiting</span></span><br><span class="line"><span class="comment"> * in shared mode, if so propagating if either propagate &gt; 0 or</span></span><br><span class="line"><span class="comment"> * PROPAGATE status was set.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> propagate the return value from a tryAcquireShared</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHeadAndPropagate</span><span class="params">(Node node, <span class="keyword">int</span> propagate)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//记录当前头结点</span></span><br><span class="line">    Node h = head; <span class="comment">// Record old head for check below</span></span><br><span class="line">    <span class="comment">//把当前获取到锁的节点设置为头结点</span></span><br><span class="line">    setHead(node);</span><br><span class="line">    <span class="comment">//propagate大于0表示后面的节点也需要唤醒</span></span><br><span class="line">    <span class="comment">//  h.waitStatus &lt; 0 表示节点是可唤醒状态</span></span><br><span class="line">    <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</span><br><span class="line">        (h = head) == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        Node s = node.next;</span><br><span class="line">        <span class="comment">//后继节点为空或者是共享模式则唤醒</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared())</span><br><span class="line">            doReleaseShared();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="doReleaseShared-唤醒操作"><a href="#doReleaseShared-唤醒操作" class="headerlink" title="doReleaseShared 唤醒操作"></a>doReleaseShared 唤醒操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Release action for shared mode -- signals successor and ensures</span></span><br><span class="line"><span class="comment"> * propagation. (Note: For exclusive mode, release just amounts</span></span><br><span class="line"><span class="comment"> * to calling unparkSuccessor of head if it needs signal.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//从头节点开始</span></span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">            <span class="keyword">int</span> ws = h.waitStatus;</span><br><span class="line">            <span class="comment">//是需要被唤醒的状态</span></span><br><span class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                <span class="comment">//CAS方式做并发控制，设置状态为0</span></span><br><span class="line">                <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;   </span><br><span class="line">                <span class="comment">//唤醒这个节点</span></span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不需要唤醒，则CAS设置状态为PROPAGATE，继续循环</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                     !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                <span class="keyword">continue</span>;                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//头结点没有改变，则设置成功，退出循环</span></span><br><span class="line">        <span class="keyword">if</span> (h == head)                   </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，共享模式与独占模式最大的不同就是，共享模式唤醒第一个节点后会迭代唤醒后面所有的共享节点。</p><p>只看原理可能有些抽象，以CountDownLatch为例，讲一下具体实现</p><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>CountDownLatch的作用类似起跑线，初始时可以设置线程个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CountDownLatch countDown = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>CountDownLatch有两个方法</p><ul><li>countDown 计数减一</li><li>await 线程挂起 </li></ul><p>使用场景：</p><ul><li>比如在多线程任务中，所有任务都完成了才能继续往下执行</li><li>比如模拟并发场景，所有任务在一个地方等待，直到个数满足了一起执行。</li></ul><h4 id="CountDownLatch内部同步器的实现"><a href="#CountDownLatch内部同步器的实现" class="headerlink" title="CountDownLatch内部同步器的实现"></a>CountDownLatch内部同步器的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</span><br><span class="line">        <span class="comment">//初始个数</span></span><br><span class="line">        Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">            setState(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//个数为0返回1，否则返回-1</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//cas方式计数减一</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> c = getState();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                    <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可中断方式获取锁，与acquireShared原理一样，额外加入了中断判断</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//释放锁，计数器减一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到CountDownLatch的处理逻辑</p><ol><li>多个线程调用await方法，将共享模式节点加入到队列中，线程挂起</li><li>有线程调用countDown(),尝试释放锁，计数器减一，但只有count为0时才能执行doReleaseShared方法，唤醒后面所有的共享节点，所有挂起线程一起开始执行。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://image.nianlun.tech/2021/12/14/c4513f4589b937a9b2afd62e021a6b86.jpg&quot; alt=&quot;pexels-monstera-6621468&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇介绍了AQS独占模式的
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
      <category term="并发" scheme="http://qlql489.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AQS原理解析（一）</title>
    <link href="http://qlql489.github.io/2018/10/28/AQS%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://qlql489.github.io/2018/10/28/AQS原理解析（一）/</id>
    <published>2018-10-28T12:37:34.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AQS是什么"><a href="#AQS是什么" class="headerlink" title="AQS是什么"></a>AQS是什么</h3><p>java concurrent包中有很多阻塞类如：<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>、<code>CountDownLatch</code>、<code>Semaphore</code>、<code>Synchronous</code>、<code>FutureTask</code>等，他们的底层都是根据aqs构建的，它可以说是java多线程编程最底层核心的抽象类。既然这么重要，我们就来看看它底层原理到底是什么。 </p><p>aqs全称<code>AbstractQueuedSynchronizer</code>，它作为抽象类无法单独使用，需要有具体实现，不同的实现中自己定义什么状态意味着获取或者被释放</p><h3 id="AQS的原理是什么"><a href="#AQS的原理是什么" class="headerlink" title="AQS的原理是什么"></a>AQS的原理是什么</h3><p>AQS内部维护一个先进先出（FIFO）的等待队列叫做CLH队列，当一个线程来请求资源时，AQS通过状态判断是否能获取资源，如果不能获取，则挂起这个线程，和状态一起封装成一个Node节点放在队尾，等待前面的线程释放资源好唤醒自己，所以谁先请求的谁最先获得机会唤醒,当然新线程可能加塞提前获取资源，在源码解析可以看到原因</p><p><img src="http://image.nianlun.tech/2018/10/28/64a59fef2d4a47dae1902a65d32c0701.jpg" alt="aqs.jpg"></p><p>AQS分独占和共享两种方式，独占模式，只有一个线程可以获得锁，比如ReentrantLock，共享模式下可以允许多个线程同时获取锁，比如CountDownLatch使用的就是共享方式，</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><p>AQS的子类需要实现的方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//独占方式获取资源</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//独占释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//共享获取资源</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//共享释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否独占</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，子类调用这些方法如果没有实现的话会抛异常，当然也不是所有方法都要实现，找自己需要的实现就可以了。</p><p>为了更好的理解先实现一个最简单的锁,只需要实现<code>tryAcquire</code>和<code>tryRelease</code>方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line">    <span class="comment">//加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> arg == <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//cas将状态从0设为1，如何不为0则失败</span></span><br><span class="line">            <span class="keyword">if</span>(compareAndSetState(<span class="number">0</span>,<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> arg == <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(getState() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将状态设为0</span></span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来写一个并发场景，简单的加法，先获取前值，用sleep模拟方法执行时间比较长,然后累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> AddCount count = <span class="keyword">new</span> AddCount();</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        count.add(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCount</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> countTotle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> count)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="keyword">this</span>.countTotle;</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">100L</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.countTotle = tmp+count;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.countTotle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="number">100</span></span><br><span class="line">    <span class="number">100</span></span><br><span class="line">    <span class="number">100</span></span><br></pre></td></tr></table></figure><p>在add方法加上自定义的的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> AddCount count = <span class="keyword">new</span> AddCount();</span><br><span class="line">        <span class="keyword">final</span> TestLock testLock = <span class="keyword">new</span> TestLock();</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        testLock.lock();</span><br><span class="line">                        count.add(<span class="number">100</span>);</span><br><span class="line">                        testLock.unLock();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="number">100</span></span><br><span class="line">    <span class="number">200</span></span><br><span class="line">    <span class="number">300</span></span><br></pre></td></tr></table></figure><p>根据这个简单的例子，我们来看一下源码中是怎么实现的</p><h4 id="acquire"><a href="#acquire" class="headerlink" title="acquire"></a>acquire</h4><p>lock方法首先调用的是AQS的<code>acquire</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">           acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">           selfInterrupt();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>它会调用<code>tryAcquire</code>尝试去取锁，如果没有取到的话调用<code>addWaiter</code>将Node放入队尾，同样也使用CAS的方式，AQS中有大量CAS的使用，不了解CAS的可以看<a href="https://www.jianshu.com/p/385741045050" target="_blank" rel="noopener">浅析乐观锁、悲观锁与CAS</a> </p><p>这里有新的线程在执行第一个判断<code>!tryAcquire(arg)</code>时，如果刚好有线程释放锁，那新的线程很有可能插队直接获取到锁，也就是有队列也无法公平的原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在尾部添加node，将node双向关联，如果成功则直接返回，这里有一个问题，在设置队尾的时候，没有并发控制，有另一个线程也来设置，就只会有一个线程成功，没成功的线程或者队尾为空则执行enq方法。</p><h5 id="enq方法"><a href="#enq方法" class="headerlink" title="enq方法"></a>enq方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Node t = tail;</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                    tail = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.prev = t;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                    t.next = node;</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里看到如果tail是null,则cas设置head为一个新节点,也就是说第一个入队的节点head和tail是相同的。<br>如果队尾不为空，则用cas加自旋的方式放入队尾。</p><h5 id="Node对象"><a href="#Node对象" class="headerlink" title="Node对象"></a>Node对象</h5><p>node对象封装了状态和请求的线程以及前后节点的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">//共享节点</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="comment">//非共享节点</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消状态（因超时或中断）</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//等待唤醒</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//等待条件</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//对应共享类型释放资源时，传播唤醒线程状态</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line">        <span class="comment">//当前状态</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line">        <span class="comment">//前一个节点</span></span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line">        <span class="comment">//下一个节点</span></span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line">        <span class="comment">//请求的线程</span></span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">        Node nextWaiter;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取前一个节点，为空则抛空指针异常</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">            Node p = prev;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">            <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">            <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没有使用condition，node常用的状态有 0 新建状态和 -1 挂起状态</p><h5 id="acquireQueued"><a href="#acquireQueued" class="headerlink" title="acquireQueued"></a>acquireQueued</h5><p>再看一下acquireQueued方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="comment">//获取前一个节点</span></span><br><span class="line">                <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">                <span class="comment">//如果前一个节点是head,并且能获取锁，则将当前节点设置为head</span></span><br><span class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                    setHead(node);</span><br><span class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    failed = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> interrupted;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断前面节点的状态，中断当前线程</span></span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    interrupted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                <span class="comment">//失败了设置成取消状态</span></span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">        <span class="comment">//如果前一个节点已经是等待状态，可以安全park</span></span><br><span class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//如何前一个节点是取消状态了，则一直往前取，去掉取消状态的节点，直到状态不为取消状态的节点</span></span><br><span class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                node.prev = pred = pred.prev;</span><br><span class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">            pred.next = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//ws必须是0或-3才会走这里，cas设置成-1待唤醒状态</span></span><br><span class="line">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//中断当前线程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的主要逻辑就是将新加入的节点设置为待唤醒状态，进入队列的节点都进入中断状态，head节点持有锁，锁被释放后后面的节点会代替之前的head成为新的head节点</p><h5 id="release"><a href="#release" class="headerlink" title="release"></a>release</h5><p>释放锁的过程，掉用<code>release</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="comment">//清除取消状态的节点</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//唤醒后一个等待的线程</span></span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用LockSupport.unpark后，唤醒后一个中断的线程，队列剔除之前的head，这样往复，释放锁后继续唤醒后面的线程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;AQS是什么&quot;&gt;&lt;a href=&quot;#AQS是什么&quot; class=&quot;headerlink&quot; title=&quot;AQS是什么&quot;&gt;&lt;/a&gt;AQS是什么&lt;/h3&gt;&lt;p&gt;java concurrent包中有很多阻塞类如：&lt;code&gt;ReentrantLock&lt;/code&gt;、&lt;c
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
      <category term="并发" scheme="http://qlql489.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>一次性搞清楚unicode的代码点和代码单元</title>
    <link href="http://qlql489.github.io/2018/09/15/%E4%B8%80%E6%AC%A1%E6%80%A7%E6%90%9E%E6%B8%85%E6%A5%9Aunicode%E7%9A%84%E4%BB%A3%E7%A0%81%E7%82%B9%E5%92%8C%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83/"/>
    <id>http://qlql489.github.io/2018/09/15/一次性搞清楚unicode的代码点和代码单元/</id>
    <published>2018-09-15T22:40:51.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.nianlun.tech/2020/11/07/f87c7e9a9af90c5c80efda27303964c3.jpeg" alt="4702918-13085078b1f89531"></p><p>最近在处理字符过滤，重新研究了下字符、unicode和代码点的相关知识，首先要说一下编码的基本知识unicode</p><h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><blockquote><p>unicode是计算机科学领域里的一项业界标准，包括字符集、编码方案等。计算机采用八比特一个字节，一个字节最大整数是255，还要表示中文一个字也是不够的，至少需要两个字节，为了统一所有的文字编码，unicode为每种语言中的每个字符设定了统一并且唯一的二进制编码，通常用两个字节表示一个字符，所以unicode每个平面可以组合出65535种不同的字符，一共17个平面。</p></blockquote><p>由于英文符号只需要用到低8位，所以其高8位永远是0，因此保存英文文本时会多浪费一倍的空间。</p><p>比如汉子“汉”的unicode,在java中输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"\u5B57"</span>);</span><br></pre></td></tr></table></figure><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>unicode在计算机中如何存储呢，就是用unicode字符集转换格式，即我们常见的UTF-8、UTF-16等。</p><p>UTF-8就是以字节为单位对unicode进行编码，对不同范围的字符使用不同长度的编码。</p><table><thead><tr><th>Unicode</th><th>Utf-8</th></tr></thead><tbody><tr><td>000000-00007F</td><td>0xxxxxxx</td></tr><tr><td>000080-0007FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>000800-00FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>010000-10FFFF</td><td>11110xxx10xxxxxx10xxxxxx10xxxxxx</td></tr></tbody></table><p>Java中的String对象就是一个unicode编码的字符串。</p><p>java中想知道一个字符的unicode编码我们可以通过Integer.toHexString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"编"</span>;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">char</span> [] source_char = str.toCharArray();</span><br><span class="line">String unicode = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;source_char.length;i++) &#123;</span><br><span class="line">    unicode = Integer.toHexString(source_char[i]);</span><br><span class="line">    <span class="keyword">if</span> (unicode.length() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        unicode = <span class="string">"00"</span> + unicode;</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(<span class="string">"\\u"</span> + unicode);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb);</span><br><span class="line">输出\u7f16</span><br></pre></td></tr></table></figure><p>对应的utf-8编码是什么呢?</p><p>7f16在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。<br>7f16写成二进制是：0111 1111 0001 0110<br>按三字节模板分段方法分为0111 111100 010110，代替模板中的x，得到11100111 10111100 10010110，即“编”对应的utf-8的编码是e7 bc 96，占3个字节</p><h3 id="codepoint"><a href="#codepoint" class="headerlink" title="codepoint"></a>codepoint</h3><p>unicode的范围从000000 - 10FFFF，char的范围只能是在\u0000到\uffff，也就是标准的 2 字节形式通常称作 UCS-2，在Java中，char类型用UTF-16编码描述一个代码单元，但unicode大于0x10000的部分如何用char表示呢，比如一些emoji：😀</p><p>java的char类型占两个字节，想要表示😀这个表情就需要2个char，看如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String testCode = <span class="string">"ab\uD83D\uDE03cd"</span>;</span><br><span class="line"><span class="keyword">int</span> length = testCode.length();</span><br><span class="line"><span class="keyword">int</span> count = testCode.codePointCount(<span class="number">0</span>, testCode.length());</span><br><span class="line"><span class="comment">//length=6</span></span><br><span class="line"><span class="comment">//count=5</span></span><br></pre></td></tr></table></figure><p>第三个和第四个字符合起来代表😀，是一个代码点,<br>如果我们想取到每个代码点做一些判断可以这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  String testCode = <span class="string">"ab\uD83D\uDE03cd"</span>;</span><br><span class="line">  <span class="keyword">int</span> cpCount = testCode.codePointCount(<span class="number">0</span>, testCode.length());</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; cpCount; ++index) &#123;</span><br><span class="line">      <span class="comment">//这里的i是字符的位置</span></span><br><span class="line">      <span class="keyword">int</span> i = testCode.offsetByCodePoints(<span class="number">0</span>, index);</span><br><span class="line">      <span class="keyword">int</span> codepoint = testCode.codePointAt(i);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">i:<span class="number">0</span> index: <span class="number">0</span> codePoint: <span class="number">97</span></span><br><span class="line">i:<span class="number">1</span> index: <span class="number">1</span> codePoint: <span class="number">98</span></span><br><span class="line">i:<span class="number">2</span> index: <span class="number">2</span> codePoint: <span class="number">128515</span></span><br><span class="line">i:<span class="number">4</span> index: <span class="number">3</span> codePoint: <span class="number">99</span></span><br><span class="line">i:<span class="number">5</span> index: <span class="number">4</span> codePoint: <span class="number">100</span></span><br></pre></td></tr></table></figure><p>也就是按照codePointindex取字符，0取到a，1取到b，2取到\uD83D\uDE03也就是😀，3取到c，4取到d；<br>按照String的index取字符，0取到a，1取到b，2取到\uD83D，3取到\uDE03，4取到c，5取到d。<br>这就是codePointIndex和char的index的区别。</p><p>取到codePoint就可以按照unicode值进行字符的过滤等操作。</p><p>如果有个需求是既可以按照unicode值过滤字符，也能按照正则表达式过滤字符，并且还有白名单，应该如何实现呢。</p><p>其实unicode过滤和正则表达式过滤并不冲突，自己实现自己的过滤就好了，如果需求加入了过滤白名单就会复杂一些，不能直接过滤，需要先检验是否是白名单的index。</p><p>我的思路是记录白名单char的index，正则表达式或其他过滤方式可以获得违规char的index，unicode黑名单的codepointIndex可以转换成char的index，在获取codePont的index时可以判断当前字符是单char字符还是双char字符，双char字符需要添加2个下标，方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取到unicode值           </span></span><br><span class="line"><span class="keyword">int</span> codepoint = testCode.codePointAt(i);</span><br><span class="line"><span class="comment">//将unicode值转换成char数组</span></span><br><span class="line"><span class="keyword">char</span>[] chars = Character.toChars(codepoint);</span><br><span class="line">charIndexs.add(pointIndex);</span><br><span class="line"><span class="keyword">if</span> (chars.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//表示不是单char字符，记录index时同时添加i+1</span></span><br><span class="line">   charIndexs.add(pointIndex + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   //例<br>        String str = “ab\uD83D\uDE03汉字”;<br>想处理emoji，那记录的下标就是2、3，最后和白名单下标比较后统一删除</p><h4 id="如何区别char是一对还是单个"><a href="#如何区别char是一对还是单个" class="headerlink" title="如何区别char是一对还是单个"></a>如何区别char是一对还是单个</h4><p>就之前的例子ab\uD83D\uDE03cd，换种写法\u0061\u0062\uD83D\uDE0\u0063\u0064<br>程序是如何将\uD83D\uDE03解析成一个字符的呢。这就需要Surrogate这个概念，来自UTF-16。</p><p>UTF-16是16bit最多编码65536，那大于65536如何编码？Unicode 标准制定组想出的办法是，从这65536个编码里，拿出2048个，规定他们是「Surrogates」，让他们两个为一组，来代表编号大于65536的那些字符。<br>编号为 U+D800 至 U+DBFF 的规定为「High Surrogates」，共1024个。<br>编号为 U+DC00 至 U+DFFF 的规定为「Low Surrogates」，也是1024个。<br>他们组合出现，就又可以多表示1048576中字符。</p><p>看一下String.codePointAt这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">codePointAtImpl</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> index, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c1 = a[index];</span><br><span class="line">    <span class="keyword">if</span> (isHighSurrogate(c1) &amp;&amp; ++index &lt; limit) &#123;</span><br><span class="line">        <span class="keyword">char</span> c2 = a[index];</span><br><span class="line">        <span class="keyword">if</span> (isLowSurrogate(c2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> toCodePoint(c1, c2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有两个方法isHighSurrogate、isLowSurrogate。<br>第一个方法判断是否为高代理项代码单元，即在’\uD800’与’\uDBFF’之间，<br>第二个方法判断是否为低代理项代码单元，即在’\uDC00’与’\uDFFF’之间。</p><p>codePointAtImpl方法判断当前char是高代理项代码单元，下一个是低代理项代码单元，则这两个char是一个codepoint。</p><p>再来看一下unicode转UTF-16的方法</p><blockquote><p>如果U&lt;0x10000，U的UTF-16编码就是U对应的16位无符号整数（为书写简便，下文将16位无符号整数记作WORD）。<br>如果U≥0x10000，我们先计算U’=U-0x10000，然后将U’写成二进制形式：yyyy yyyy yyxx xxxx xxxx，U的UTF-16编码（二进制）就是：110110yyyyyyyyyy 110111xxxxxxxxxx。</p></blockquote><p>还是以U+1F603这个😃为例子，U’=U-0x10000=F603<br>写成2进制就是1111011000000011，不足20位前面补0，<br>变成0000111101-1000000011，替换y和x就是1101100000111101，1101111000000011，最后UTF-16编码就是[d83d，de03] 和上面一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://image.nianlun.tech/2020/11/07/f87c7e9a9af90c5c80efda27303964c3.jpeg&quot; alt=&quot;4702918-13085078b1f89531&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在处理字符过滤，重新
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
      <category term="编码" scheme="http://qlql489.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>番茄工作法</title>
    <link href="http://qlql489.github.io/2017/07/07/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/"/>
    <id>http://qlql489.github.io/2017/07/07/番茄工作法/</id>
    <published>2017-07-07T17:26:38.000Z</published>
    <updated>2022-11-19T08:49:40.695Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.nianlun.tech/2020/11/07/a4123af0a62e211386600460cf6fd57c.png" alt="img"></p><p>你是否经常会发现小事儿忙活了一天大事一样都没办，或者因为各种原因重要的事情一拖再拖，做一件事情没有专注力，经常分神。</p><p>你还没有做好时间管理，时间管理是个人管理中很重要的一环，很多人也尝试过一些时间管理的理论或工具，最终不是因为复杂而放弃，就是因为没有毅力坚持不下去。</p><p>除了番茄工作法，其他的时间管理理论我也有学习，比如GTD和柳比歇夫的时间记录法。</p><p>GTD系统很复杂，光书就有3本，偏向于对任务的整体把握，柳比歇夫的时间记录法没有强大的执行力根本不可能完成，番茄工作法更关注于执行和专注。</p><p>如果你一直苦恼学不会时间管理，或者没有合适的工具，那么试试番茄工作法吧，它简单到没有任何时间管理概念的人都可以很快上手，应该是目前最简单易行的时间管理方法了。</p><p>番茄工作法使用起来非常简单。也是一个很好的入门级时间管理工具，但它并不是适合所有人，如果你已经形成了自己的时间管理体系就可以忽略这篇文章了，时间管理是一个系统，适合你的才是最好的。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>使用番茄工作法非常简单，只需要：</p><p><strong>一支笔</strong></p><p><strong>一个计时器——可以是秒表、厨房闹钟或者找一个番茄钟的app</strong></p><p><strong>三个清单——分别是活动清单，今日待办和记录表</strong></p><p>活动清单——就是收集表，列出所有需要做的事情。</p><p>今日待办——从活动清单中挑出几个今天要专注做的事情，不要贪多刚开始3件事就可以了。</p><p>记录表——对今天执行情况的一个记录与复盘，看看预估与执行的差距。</p><p>如果觉得纸质的麻烦，直接找个趁手的app，或者小程序。</p><p>清单系统是每个时间管理工具必备的，它最大的作用就是清空你的大脑。<br>大脑主要是思考用的而不是记忆用的，有调查研究人的大脑同一时间最多只能关注7件事，用大脑去记录不仅耗费精力而且很有可能会忘记，我们的大脑每天都会闪现出很多想法，及时的记录单清单中清空你的大脑。</p><h4 id="如何吃番茄"><a href="#如何吃番茄" class="headerlink" title="如何吃番茄"></a>如何吃番茄</h4><p><strong>从今日待办中挑出最重要，或者是马上要执行的一个任务。</strong><br><strong>找出你的计时器，设置25分钟倒计时。</strong><br><strong>在接下来的25分钟里全神灌注地完成这项工作。</strong><br><strong>25分钟到停止工作，休息5分钟，做记录，再进行下一个番茄钟。</strong><br><strong>执行完4个番茄钟，休息30分钟。</strong></p><p>吃番茄的流程是非常简单的，不过还有几点原则需要了解。</p><p>番茄钟的时间可以调整，推荐是25分钟，刚开始无法做到25分钟可以适量减少，但不要小于10分钟。</p><p>一个番茄钟是不可分割的，如果中途被打断，如被别人叫走或自己中断，则这个番茄钟作废。</p><p>经过预估，如果一个任务需要七个以上的番茄钟就应当拆分它。</p><p>有人可能会说这不就是工作25分钟休息5分钟吗，我平时工作一天都不怎么休息。</p><p>如果你也这么想那还没有完全领悟番茄工作法，之前在讲流程时说的是全神贯注的25分钟，就是抵抗所有干扰专心只做这一件事，做到这点真的很难。</p><p>人的大脑每天都会迸发出各种想法，如果任由大脑想起什么就去做什么，你会发现最终一件事都没做好。</p><p>身处信息时代，手机、微信、淘宝、新闻无时不刻不吸引着你的注意力。</p><p>你肯定有这样的经历: 工作或学习时微信或qq响了，看看朋友圈或公众号又有什么新资讯，或者jd又做活动了，再刷刷淘宝，等回过神发现已经过去好久，刚刚工作到哪一步又忘了。</p><p>我之前的文章提过，人脑和cpu一样，频繁的切换任务会消耗大量的时间，人脑恢复之前的工作状态需要一个过程。</p><p>番茄钟里面的专注时间是不允许有这类事情发生的，否则这个番茄作废。</p><h4 id="关于中断"><a href="#关于中断" class="headerlink" title="关于中断"></a>关于中断</h4><p>中断是不可避免的，要做的就是尽量保护你的番茄，中断分为内部中断和外部中断。<br><img src="http://image.nianlun.tech/2020/11/07/0c2c1234389ed04894c85c66dab092df.jpeg" alt=""></p><p><strong>内部中断举例：</strong></p><p>上个厕所</p><p>倒杯水喝</p><p>给xxx打个电话</p><p>刷刷手机，看看感兴趣的新闻或文章</p><p>内部中断是自己引起的，刚开始内部中断会非常多，像上厕所倒水这种事情就需要调整到休息的5分钟去做，其他脑子里蹦出的想法需要单独记录在计划外事务中，在执行完当前的番茄钟再去处理，并在当前任务后标注（`）。</p><p>处理内部打断的机理，就是逆转我们与打断的决定与被决定关系，让我们决定打断是否发生，而不是受制于打断。</p><p><strong>外部中断-被他人打断</strong></p><p>在工作环境中经常会被一些外部因素打断，例如：</p><p>同事请教你解决问题；</p><p>老板突然找你；</p><p>接电话；</p><p>qq、微信、msn弹框；</p><p>外部中断都是和别人有关的，处理的原则和内部中断差不多，我们自己来决定是否要打断。</p><p>通讯软件关掉消息提示，或者在休息时统一查看，如果是同事过来找你，不是非常紧急的事情你可以礼貌的说明现在手头还有事，过一会再来找你或你去找他，打断一次在当前工作后记录（-）并把事项计入待办清单中。</p><p>如果是非常紧急的事情那不得不中断这个番茄钟了，比如老板叫你去办公室谈话吗，你不可能和老板说我再吃番茄吧。</p><p>不要觉得经常拒绝别人是很不礼貌的事情，这种推迟对想要和沟通的人来说是完全可以理解的，然而这种推迟可以极大的提高你的工作效率。</p><h4 id="计划与回顾"><a href="#计划与回顾" class="headerlink" title="计划与回顾"></a>计划与回顾</h4><p>只是学会吃番茄还不够，最重要的阶段是每天的分析与计划阶段。</p><p><img src="http://image.nianlun.tech/2020/11/07/2f37a369513a72aa3b1603775e6b498e.png" alt=""></p><p>在计划每日待办时需要预估每项任务所花费的番茄数，然后记录实际吃掉的番茄数与打断次数，在每天的分析复盘阶段我们需要关注以下几点:</p><p>计划的任务是否已经完成，添加了哪些计划外任务。</p><p>任务的中断次数自己是否满意。有哪些中断是不受控的。</p><p>任务预计番茄数与实际番茄数对比差了多少，思考以后计划需要那些调整。</p><p>形成这样的反馈系统才会让你对时间的掌控越来越准。</p><p>通过比较，预估番茄数和实际完成用番茄树可以及时反馈修正自己的目标设定，使目标明确化，辨别并删除不必要的工作。</p><h4 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h4><p>番茄工作法工作25分钟休息5分钟能培养我们高效的工作节奏，不至于工作太久身体得不到休息，也让工作的25分钟专注提高产出。</p><p>时间长了，你会自觉的进入专注-休息-专注的节奏中，尽可能的排除干扰，同时一步一步的达成设定的目标减少焦虑感。</p><p>最后，番茄工作法也只是一个工具，适不适合你试过才知道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://image.nianlun.tech/2020/11/07/a4123af0a62e211386600460cf6fd57c.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;你是否经常会发现小事儿忙活了一天大事一样都没办，或者因为各种原因重要
      
    
    </summary>
    
      <category term="读书" scheme="http://qlql489.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="时间管理" scheme="http://qlql489.github.io/categories/%E8%AF%BB%E4%B9%A6/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="学习" scheme="http://qlql489.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书" scheme="http://qlql489.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>写文章没有逻辑？</title>
    <link href="http://qlql489.github.io/2017/05/23/%E5%86%99%E6%96%87%E7%AB%A0%E6%B2%A1%E6%9C%89%E9%80%BB%E8%BE%91%EF%BC%9F/"/>
    <id>http://qlql489.github.io/2017/05/23/写文章没有逻辑？/</id>
    <published>2017-05-23T08:00:22.000Z</published>
    <updated>2022-11-19T08:49:40.695Z</updated>
    
    <content type="html"><![CDATA[<p>我们在生活或工作中可能遇到过这样的事情：</p><ul><li>脑子里很多想法但写出来的文章没有逻辑与结</li><li>和别人表达一件事情总是说不清逻辑</li><li>看书或听分享自己很难归纳出重点</li></ul><p>这些其实就是缺少结构思考的能力，什么事结构思考力呢？</p><p>结构存在于每个整体与局部关系的无穷变化中，每个局部表现整体，而局部的意义又由整体来决定。</p><p>结构思考力是指以结构的视角从过个侧面全面而清晰、强调“先总后分”的分析事物的一种方法。</p><p>下面就分享一下看李忠秋的《结构思考力》的一些心得</p><p><img src="http://image.nianlun.tech/2020/11/07/92a2607e40ca63355bebf8c3a74b0676.png" alt="来自网络"></p><h4 id="什么是结构思考力"><a href="#什么是结构思考力" class="headerlink" title="什么是结构思考力"></a>什么是结构思考力</h4><p>结构思考力有四个基本点<br>书中给了一个例子：</p><blockquote><p>假如你是董事长，你的秘书早上给你打电话：<br>“董事长您好！刘经理来电话说系统出现突发状况，4点钟他无法参加会议了，小张说他晚一点开会没关系，明天再开也可以，但最好别11点30分之前开。科室会意思明天已经被别人预定了，但星期五是空着的。王总的秘书说，王总明天需要很晚才能从外地出差回来。我建议把会议时间定在星期五的10点比较合适，您看行吗？”</p></blockquote><p>这个表达非常乱，那怎么说才不乱呢？<br>商务沟通中时间比较紧迫，所以一定是先说结果后说原因更有效率。<br>原因可以被分类：人为原因会议室原因。<br>原因可以总结概括。<br>表达式按职务顺序排列。</p><p>参考答案：<br> “我们可以将今天下午4点的会议改在星期五上午10点开吗？因为王总、刘经理和小张都可以参加，并且本周五会议室还能预定”</p><p><img src="http://image.nianlun.tech/2020/11/07/ec4cd52abd1eeee643d6407240e4c65f.png" alt=""><br>这样拆分后可以在最短时间内把问题表达清楚。如果你只有5秒钟，直接说结论；如果老板给你30秒，可以说到底二级；给你1分钟可以说到第三级。</p><p>这个案例可以得出结构思考力的四个基本特征，也是金字塔原理的四个基本原则：</p><ul><li>结论先行</li><li>以上统下</li><li>归类分组</li><li>逻辑递进</li></ul><p>先说结论在现在的高效社会可以极大的提高沟通效率，最近工作中负责带新人，他经常会有自己解决不了的代码问题来问我，我发现他的沟通方式就有问题。</p><p>他会先描述问题的操作顺序，我先怎么着，然后怎么着，还要等到我的答复再继续，描述情景就花了很长时间，然而我依旧不知道他想问的究竟是什么，有时候在他问的过程中我会揣测他的问题，最后他问的是别的问题… </p><p>他的问题就是没有按照结构化表述，问问题前没有自己想清楚，想到哪就说到哪，逻辑混乱，前面的描述可能和他问的问题没有什么关系。</p><p>后来我给他提的一个要求就是先说你的问题再说过程和情景，这样我能准确的定位他遇到的问题，就算他在描述是说到不相关的我也能很快把他拽回来，节省了很多沟通的成本。</p><p>如果工作中你在汇报工作时遇到了一个不耐烦的老板，思考一下是不是你没有结论先行，结构化的表达，当然每个老板的脾气也不一样。</p><h4 id="我们如何接收信息"><a href="#我们如何接收信息" class="headerlink" title="我们如何接收信息"></a>我们如何接收信息</h4><p>如今我们处在信息爆炸的时代，每天都有很多新闻、文章、分享、微课进入我们的视角，每天都用很多的时间刷微信，生怕错过了有用的信息。</p><p>关注了大量的公众号，看的时候都觉得不错，讲的有道理，很多人估计就是照单全收，尤其是泛滥在朋友圈中的毒鸡汤，所以独立思考的能力很重要。</p><p>我们如何判断文章是否正确或是否对自己有用呢？</p><p>我们要分析这件事是不是对我很重要，正确的道理很多，但对我们不一定有用，时间是有限的，我们看对自己有帮助或可以提高的信息。</p><p>思考作者是通过什么得出这个结论，是通过一件事还是别人的转述，我们能否得出同样的结论。</p><p>作者得出结论的环境是否有很强的适用性，简单说这件事和你的现在和将来有没有关系。</p><p>最后结合你自己的情况，如果碰到了这样的问题你有什么看法。</p><p>通过简单的几个问题就能过滤大量你用不到的信息。</p><h4 id="如何构建金字塔"><a href="#如何构建金字塔" class="headerlink" title="如何构建金字塔"></a>如何构建金字塔</h4><p>金字塔结构分为纵向和横向两个方向</p><p>构建纵向结构书中给了两种方法：</p><ul><li>自上而下，适用于主题比较明确的情景，比如写文章、做汇报、演讲。</li></ul><p>自上而下是用疑问回答做分解。</p><p><img src="http://image.nianlun.tech/2020/11/07/eb521975b9a334b4d633445e97e6b823.png" alt=""></p><p>设想问题的时候一定要从对方的角度考虑问题，而不是仅仅表达自己想到的，比如你在请教别人问题的时候或者分享经验时一定要尽量想别人会怎么问你，这样你的准备会更加充分。</p><p>你想想如果别人问你时你说这个我还没想过，这个我还不明白，场面有多尴尬。</p><ul><li>自下而上，适用于只有底层杂乱的资料或信息的情景。</li></ul><p>如根据一年的工作内容做工作汇报；老板给你一堆材料写ppt；学习看书或听讲座时快速整理杂乱的信息；</p><p>流程分为3个步骤：</p><p>1、收集信息<br>2、分类<br>3、概括总结</p><p>实际的情景中不太可能只用一种方法就把结构建完，一定是两种方法同时使用。</p><p>就比如写文章，你会先定关于这个文章的几个观点，然后搜集材料，如果没有最下面的素材，你无法支撑你的观点，你也需要判断搜集的素材是否符合你的观点，向上概括总结时你的观点需不需要调整，所以自上而下，自下而上需要同时使用，相互配合。</p><h4 id="结构化套路"><a href="#结构化套路" class="headerlink" title="结构化套路"></a>结构化套路</h4><p>在分析问题过解决问题时厉害的人总是能抓住重点，全面的分析问题，其实是他们想我了很多结构化套路。</p><p>而这些套路就成了他们的快捷方式，在碰到对应的问题时能快速反应。</p><p>最常用的大家都知道的就是2w1h模型——黄金思维圈</p><p><img src="http://image.nianlun.tech/2020/11/07/646513795c78a1ebbd1040acddd02fa9.png" alt="来自网络"><br>w-what 是什么（现象）<br>w-why  为什么 （原因）<br>h-how  怎么做 （解决方案）</p><p>这个模型非常常见，这符合大部分人的思维习惯。</p><p>你可以随便找几个公众号的文章拆解一下，你会发现很多文章的结构使用了2w1h，</p><p>先引出想要表达的观点。<br>再分析发生这件事的原因。<br>最后通过自己的经验告诉大家应该如何做。</p><p>我们看文章写笔记时也能使用黄金思维圈将文章拆解，快去提出干货。</p><p>这是一篇公众号文章的评论：</p><blockquote><p>What：买书提升自己的方式到底是什么？学习的目的是更新操作系统，把买来的都学完是典型的定价错误。<br>Why：由于缺乏一些必备知识导致认知失调，用不合适的经验去解释世界、解决问题，形成错误的认知。<br>How：①必须构建自己的操作系统，操作系统即世界观、人生观和价值观对应的概念、原则、假设、模型、推演逻辑。②理解高效学习方法：基于目标导向、架构导向、表征导向、高效导向、输出导向的学习方法③建议直接把得到APP中的付费全买了④想办法把你的投入赚回来⑤适用边界是高品质课程和书。</p></blockquote><p>原文链接 <a href="http://mp.weixin.qq.com/s/sUsbBjuxzcaxwHk3x6niSQ" target="_blank" rel="noopener">简单方法彻底解决囤课、囤书不看的焦虑症</a> </p><p>这种总结和输出能增加你和信息的连接度。</p><p>相信你看过的很多文章都不记得说过什么了，如果你看到的好文章都能输出心得，并且总结回顾，短暂记忆就会变成长久记忆，变成你的知识。</p><p>这种思考方式也出现在生活的各个角落，而我们很多时候思考问题仅仅还是停留在what 阶段。</p><p>比如领导给你安排工作，有时指出的是具体的一件事要怎么做，如果你仅仅是按照领导的安排去做，你在领导那仅仅是一个合格的员工而已。</p><p>假如你分析了领导安排工作的原因，他要达到的目的，你就不仅仅局限于领导的解决方法，而是思考这个是不是最优解，自己有没有别的方案。</p><blockquote><p>spenser说过：<br>也就是说，你让老板做选择题，而不是让他做填空题。<br>如果你能考虑到老板都没考虑到的，老板爱死你了。</p></blockquote><p>还有很多模型，比如GROW模型，目标制定的SMART，战略分析的SWOT模型，有兴趣的朋友可以去看看。</p><p>结构思考力不是看一本书就能学会，需要大量的联系，书中作者给了大量的事例，想深入了解的看看原著吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在生活或工作中可能遇到过这样的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脑子里很多想法但写出来的文章没有逻辑与结&lt;/li&gt;
&lt;li&gt;和别人表达一件事情总是说不清逻辑&lt;/li&gt;
&lt;li&gt;看书或听分享自己很难归纳出重点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些其实就是缺少结构思考的能力，什
      
    
    </summary>
    
      <category term="读书" scheme="http://qlql489.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="写作" scheme="http://qlql489.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="结构" scheme="http://qlql489.github.io/tags/%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>没有人能伤害你,除非你愿意</title>
    <link href="http://qlql489.github.io/2017/04/26/%E6%B2%A1%E6%9C%89%E4%BA%BA%E8%83%BD%E4%BC%A4%E5%AE%B3%E4%BD%A0%EF%BC%8C%E9%99%A4%E9%9D%9E%E4%BD%A0%E6%84%BF%E6%84%8F/"/>
    <id>http://qlql489.github.io/2017/04/26/没有人能伤害你，除非你愿意/</id>
    <published>2017-04-26T08:46:43.000Z</published>
    <updated>2022-11-19T08:49:40.695Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.nianlun.tech/2020/11/07/3dce744fb0f34ee5b167711c4a474eb9.png" alt="来自网络"></p><p>前一段时间有次出门倒垃圾，恰好听见隔壁一个妈妈生气的在骂自己的儿子，说话很难听，大概原因就是最近孩子都没考好，而这位妈妈的表现已经不是在教育，而是发泄自己的情绪，孩子一句话没有回，不知道是因为害怕还是已经习惯。</p><p>发脾气对事情没有任何好处，孩子或多或少很产生心里阴影，而这位母亲不知道会不会在情绪稳定后又后悔自己的行为。</p><p>我们每天都会因为各种事情产生不同的情绪，而如何处理这些情绪需要很大的智慧，情绪管理是个人修炼中很重要的一环，很多人在遇到事情后根本控制不住自己的情绪，负面情绪经常出现且持续不断，影响身心健康，人际关系和日常生活。下面分享一下自己在情感修炼上的一些感悟。</p><h3 id="情绪不分好坏"><a href="#情绪不分好坏" class="headerlink" title="情绪不分好坏"></a>情绪不分好坏</h3><p>我们都知道人应该尽量保持积极的情绪，尽量减少消极的情绪，<strong>其实情绪并不分好坏，情绪引起的行为才有好坏之分。</strong></p><p>一个不会生气的人只能受别人的欺负，而一个动不动就生气的人将被被情绪控制。适度的焦虑会让我们更加努力，然而焦虑过度则会使人变得消极，甚至变得抑郁。</p><p>处理不好负面情绪会给身心产生巨大的伤害，人们常说“性格决定命运“，有些性格和癌症的发生有很大关系，有统计资料显示，与普通人相比，性格忧郁、感情不外露的人患癌症的比例比性格开朗的人要高出15倍，尤其好发于受了一些挫折后长期处于精神压抑、焦虑、悲伤等负面情绪的人。</p><p>有研究表明，生气会使人体肝脏存储的气血急剧的流失，流失很容易，在储存就很难了，过度生气会导致肝气郁结，情绪更加难以控制，行程恶性循环。</p><p>我们都碰到过脾气很大的人，他们在情绪上在个性上是强烈的，他们经常因为一点小事而暴跳如雷，他们总是把自己的意愿强加在别人身上，一旦不按他们的想法发展他们就发脾气。</p><p>表面上看上去他们是强的那一方，别人都要让着他，事实真的是这样吗?</p><p>每个人都有自己的情绪开关， 碰到了特定的事情就会有失去理智，爱发脾气的人把自己的情绪开关拱手让给别人，别人的一举一动随时都可能触发他们的开关，控制他们情绪的是外在的人和事，而不是他自己，他们成了情绪的奴隶。</p><p>为什么他们要表现的这么强，因为他们“小”的很，<strong>当一个人表现的很用力时，说明自己的内心已经不够了，你如果足够“大”，对自己足够有信心，你不用大声的叫，你只要轻声的说就可以了。</strong>你能强多久呢，你一直绷得很紧，到最后就崩溃了。</p><h3 id="真正厉害的人都是柔软的"><a href="#真正厉害的人都是柔软的" class="headerlink" title="真正厉害的人都是柔软的"></a>真正厉害的人都是柔软的</h3><p>真正心智成熟的人不是没有情绪，他们只不过不会被情绪左右罢了，一颗柔软的心才能有真正强大的内在力量。</p><p> 1863年南北战争，南方将军罗伯特·李向南撤退，途中遭遇暴雨，一条河横在他们前头，河水暴涨，他们无法渡河，而乘胜追击的北方军就在后面，北方军只要在前进一步，就可以俘获李将军并结束这场战斗，林肯要求米德将军立即袭击李将军，命令他事先不要召集军事会议以免贻误战机。可米德将军硬是先召开了军事会议，犹豫官网，最后河水退去后丽江就和他的军队就这样逃走了。</p><p>林肯对这件事震怒至极，在那个时机任何一位将军都可以击败李将军，林肯给迷德写了一封信，最然措辞谨慎，但在当时已经是极为尖锐的指责了。</p><p>最后，米德根本没有收到这封信，在林肯死后才从一大堆文件中找到，林肯知道，批评和指责并没有任何效果。</p><h3 id="情绪ABC"><a href="#情绪ABC" class="headerlink" title="情绪ABC"></a>情绪ABC</h3><p>美国心理学家阿尔伯特·艾利斯有一个著名的情绪ABC理论：A（activating event）是指具体的事件，B(belief）是一个人对A的看法、评价和解释，C(consequence）是指这个人产生的情绪及行为结果。</p><p>人们通常认为诱发事件A导致了结果C，什么事就应该有什么情绪反应，所以大多数人都是针对A解决问题。</p><p>像之前的例子，孩子没考好让妈妈生气，大多数家长估计就是批评教育孩子，给他报补习班，自己盯着孩子学，想尽一切办法搞定A，然而他们没有思考过自己的这个想法是不是一定是对的，孩子没考好是不是自己的教育出了问题，是不是偶然现象，考不好是否自己就要生气。</p><p>杨绛先生说过：没有人能伤害你,除非你愿意。</p><p>真正伤害你的，往往不是事情本身，而是你对事情的看法，所以我们是有选择权的，只不过很多人把它交给了别人。</p><h3 id="你的质量决定了你的情绪"><a href="#你的质量决定了你的情绪" class="headerlink" title="你的质量决定了你的情绪"></a>你的质量决定了你的情绪</h3><p>物理学上我们知道，一个物体质量越大，它受到撞击后自身的改变越小，人其实也一样，质量小的人发生很小的事情会有很大的反应，质量大的人正好相反，有些事很多人都受不了，但有些人能够坦然面对。</p><p>你越“重”，你的情绪越稳定，当我们的心量不够大，没有足够的力量面对时，就会变成对当下事情的抗拒，认为事情不应该发生，我们必然会找一个替罪羊去承担这个错误，这可能是你的爸妈，你的伴侣，你的孩子。</p><p>内心越不稳定，就期待环境稳定，一旦事情稍稍偏离自己的期待，负面情绪就会爆发。</p><p>小到周围的噪音，孩子的哭闹，地铁上的拥挤，大到失业离婚，股票暴跌。</p><p>然而抱怨和批判不能解决任何问题，反而让你的心量更低，人生不如意之事十之八九，如果期待一切都如你的意，你一辈子也不会如意。</p><p>情感的修炼是一个漫长的过程，控制好情绪才能控制好人生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://image.nianlun.tech/2020/11/07/3dce744fb0f34ee5b167711c4a474eb9.png&quot; alt=&quot;来自网络&quot;&gt;&lt;/p&gt;
&lt;p&gt;前一段时间有次出门倒垃圾，恰好听见隔壁一个妈妈生气的在骂自己的儿子
      
    
    </summary>
    
      <category term="成长" scheme="http://qlql489.github.io/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="随笔" scheme="http://qlql489.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="脾气" scheme="http://qlql489.github.io/tags/%E8%84%BE%E6%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Fegin超时重试源码</title>
    <link href="http://qlql489.github.io/2017/04/10/SpringCloud-Fegin%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E6%BA%90%E7%A0%81/"/>
    <id>http://qlql489.github.io/2017/04/10/SpringCloud-Fegin超时重试源码/</id>
    <published>2017-04-10T16:28:33.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p>springCloud中最重要的就是微服务之间的调用，因为网络延迟或者调用超时会直接导致程序异常，因此超时的配置及处理就至关重要。</p><p>在开发过程中被调用的微服务打断点发现会又多次重试的情况，测试环境有的请求响应时间过长也会出现多次请求，网上查询了配置试了一下无果，决定自己看看源码。<br>本人使用的SpringCloud版本是Camden.SR3。</p><p>微服务间调用其实走的是http请求，debug了一下默认的ReadTimeout时间为5s，ConnectTimeout时间为2s，我使用的是Fegin进行微服务间调用，底层用的还是Ribbon，网上提到的配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  ReadTimeout: 60000</span><br><span class="line">  ConnectTimeout: 60000</span><br><span class="line">  MaxAutoRetries: 0</span><br><span class="line">  MaxAutoRetriesNextServer: 1</span><br></pre></td></tr></table></figure><p> 超时时间是有效的但是重试的次数无效，如果直接使用ribbon应该是有效的。</p><p>下面开始测试：<br>在微服务B中建立测试方法，sleep 8s 确保请求超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/testa"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">testee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">8000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在微服务A中使用fegin调用此方法时看到有异常</p><p>看到在SynchronousMethodHandler中请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Request request = targetRequest(template);</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logRequest(metadata.configKey(), logLevel, request);</span><br><span class="line">    &#125;</span><br><span class="line">    Response response;</span><br><span class="line">    <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = client.execute(request, options);</span><br><span class="line">      response.toBuilder().request(request).build();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">        logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime(start));</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">//出现异常后抛出RetryableException</span></span><br><span class="line">      <span class="keyword">throw</span> errorExecuting(request, e);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>出现异常后调用 throw errorExecuting(request, e) 抛出异常</p><p>在调用executeAndDecode的地方catch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RequestTemplate template = buildTemplateFromArgs.create(argv);</span><br><span class="line">    Retryer retryer = <span class="keyword">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeAndDecode(template);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">         <span class="comment">//重试的地方</span></span><br><span class="line">        retryer.continueOrPropagate(e);</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">          logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>retryer.continueOrPropagate(e); 这句就是关键继续跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">continueOrPropagate</span><span class="params">(RetryableException e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//maxAttempts是构造方法传进来的大于重试次数抛出异常,否则继续循环执行请求</span></span><br><span class="line">      <span class="keyword">if</span> (attempt++ &gt;= maxAttempts) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">     ....</span><br></pre></td></tr></table></figure><p>默认的Retryer构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Default</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="number">100</span>, SECONDS.toMillis(<span class="number">1</span>), <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第一个参数period是请求重试的间隔算法参数，第二个参数maxPeriod 是请求间隔最大时间，第三个参数是重试的次数。算法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">nextMaxInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">long</span> interval = (<span class="keyword">long</span>) (period * Math.pow(<span class="number">1.5</span>, attempt - <span class="number">1</span>));</span><br><span class="line">     <span class="keyword">return</span> interval &gt; maxPeriod ? maxPeriod : interval;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们能否改写参数呢？我们再看看SpringCloud的文档中关于Retry的配置</p><p><img src="http://image.nianlun.tech/2020/11/07/7b1c9b254ba8d97f0ca08be77ec261be.png" alt=""><br>新建一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeginConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retryer <span class="title">feginRetryer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Retryer retryer = <span class="keyword">new</span> Retryer.Default(<span class="number">100</span>, SECONDS.toMillis(<span class="number">10</span>), <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> retryer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在feginClient是加入configuration的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"fund-server"</span>,fallback = FundClientHystrix.class,configuration = FeginConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FundClient</span></span></span><br></pre></td></tr></table></figure><p>重启重试，只调用了一次，Fegin重试次数解决。<br>我们再看看请求超时这里的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">URI asUri = URI.create(request.url());</span><br><span class="line">String clientName = asUri.getHost();</span><br><span class="line">URI uriWithoutHost = cleanUrl(request.url(), clientName);</span><br><span class="line">FeignLoadBalancer.RibbonRequest ribbonRequest = <span class="keyword">new</span> FeignLoadBalancer.RibbonRequest(</span><br><span class="line"><span class="keyword">this</span>.delegate, request, uriWithoutHost);</span><br><span class="line">                     <span class="comment">//请求参数</span></span><br><span class="line">IClientConfig requestConfig = getClientConfig(options, clientName);</span><br><span class="line"><span class="keyword">return</span> lbClient(clientName).executeWithLoadBalancer(ribbonRequest,</span><br><span class="line">requestConfig).toResponse();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">IOException io = findIOException(e);</span><br><span class="line"><span class="keyword">if</span> (io != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> io;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中ReadTimeout 和 ConnectTimeout 读取的就是ribbon的配置，再来看一眼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  ReadTimeout: 60000</span><br><span class="line">  ConnectTimeout: 60000</span><br><span class="line">  MaxAutoRetries: 0</span><br><span class="line">  MaxAutoRetriesNextServer: 1</span><br></pre></td></tr></table></figure><p><img src="http://image.nianlun.tech/2020/11/07/37f6513797594c85149b21d9ae6fcd42.png" alt="图片.png"></p><p>如果想覆盖ribbon的超时设置可以在刚刚写的FeginConfig里注入下面的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Request.<span class="function">Options <span class="title">feginOption</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Request.Options option = <span class="keyword">new</span> Request.Options(<span class="number">7000</span>,<span class="number">7000</span>);</span><br><span class="line">    <span class="keyword">return</span> option;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：使用开源的东西在弄不清问题出在哪时最好能看看源码，对原理的实现以及自己的编码思路都有很大的提升。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;springCloud中最重要的就是微服务之间的调用，因为网络延迟或者调用超时会直接导致程序异常，因此超时的配置及处理就至关重要。&lt;/p&gt;
&lt;p&gt;在开发过程中被调用的微服务打断点发现会又多次重试的情况，测试环境有的请求响应时间过长也会出现多次请求，网上查询了配置试了一下无果
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://qlql489.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>世界在加速，你还在原地踏步</title>
    <link href="http://qlql489.github.io/2017/03/21/%E4%B8%96%E7%95%8C%E5%9C%A8%E5%8A%A0%E9%80%9F%EF%BC%8C%E4%BD%A0%E8%BF%98%E5%9C%A8%E5%8E%9F%E5%9C%B0%E8%B8%8F%E6%AD%A5/"/>
    <id>http://qlql489.github.io/2017/03/21/世界在加速，你还在原地踏步/</id>
    <published>2017-03-21T11:25:51.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.nianlun.tech/2020/11/07/f6701e307d54c49f2b61c3ccdd42a03f.png" alt="img"><br>从AlphaGo战胜李世石到年前 AlphaGo2.0在快棋平台59连胜血洗围棋界，人们感叹人工智能已经攻克了人类最后的智慧堡垒。</p><h3 id="人工智能离我们有多远"><a href="#人工智能离我们有多远" class="headerlink" title="人工智能离我们有多远"></a>人工智能离我们有多远</h3><p>先说一个大家可能听过的概念：吓尿指数</p><blockquote><p>一个人去到未来，他被环境吓尿了，这个时间差就是“吓尿指数”。</p></blockquote><p>举个例子：你现在邀请200年前的人来现在玩，顺便看看他对“未来“的感受，他可能无法理解现在的社会甚至被吓尿，但是他回去后想把别人吓尿，再往前200年是不够的，可能要回到更古老的过去，比如第一次工业革命之前，那时候还没有文明，还是狩猎采集的时代。狩猎时代的人想再把前人吓尿，往前1万多年是不够的，可能需要10万年前或者更久，用火或语言把别人吓尿，而我们去往20-30年后的未来估计也会被吓尿。</p><p>吓尿单位是呈指数级缩短，这源于加速回报定律，和滚雪球类似。<br>21世纪的15年发展相当于20世纪一个世纪的速度。技术的发展可能远超了我们的想象。</p><p>人工智能离我们还远吗，我列举几个已经发生的例子：</p><h4 id="1-机械制造"><a href="#1-机械制造" class="headerlink" title="1|机械制造"></a>1|机械制造</h4><p>富士康因面临短期缺工，人力成本增加，已经在用机器人逐步替代人，美国一家公司研发的搬运机器人适应能力很强，可以抓取各种形状的货物，对搬运工人是一个挑战。</p><p>机器人在制造业中更广泛地应用是大势所趋，机器人不用休息，不会跳楼也不会罢工，在流水线生产、仓库装卸、农场采摘、驾驶、打扫等领域机器将进一步巩固其地位。</p><p>你可能会说，这些机器也只能替代比较低级的简单重复劳动，那你可能没有看过下面的例子:</p><h4 id="2-法律"><a href="#2-法律" class="headerlink" title="2|法律"></a>2|法律</h4><p>美国一家公司研发的ROSS人工智能律师可以理解自然语言、回答问题、提出假设并持续关注当前的法律动态。<br>ROSS基于大数据+机器学习的模式对用户的提问进行反馈，随着越来越多的人使用ROSS，ROSS的能力和准确度将会呈现指数型的增长。<br>ROSS已经为几十万破产企业提供服务，美国的破产律师日子也不好过。</p><h4 id="3-医疗领域"><a href="#3-医疗领域" class="headerlink" title="3|医疗领域"></a>3|医疗领域</h4><p>根据美国PDA药物评价和研究中心提供的数据，在美国每天至少有一例由于投药差错而造成的死亡，每年由于投药错误造成约130人受到损伤，自动配药机器人极大减少配药的错误率，避免人为影响，保证了配药环境的洁净标准，配药师将逐步被淘汰。</p><p>斯坦福大学一个联合研究团队开发出了一个诊断皮肤癌的人工智能，准确度达到了91%。</p><p>谷歌大脑与Verily公司联合开发了一款能用来诊断乳腺癌的人工智能，准确率已经超越了资深病理学家。</p><p>中国很多患者心中看病要找“老大夫”，因为他们经验丰富，但人学习的再快也比不过计算机，全球每天能产生亿万级的数据供人工智能学习。计算机在诊断和手术领域相比人类有几个优势：</p><ul><li>有大数据的支撑它们“失误”的可能性极低</li><li>它们的稳定性极高，外科医生的医术再高超手也会抖。</li></ul><h5 id="4-金融领域"><a href="#4-金融领域" class="headerlink" title="4|金融领域"></a>4|金融领域</h5><p>从程序上看，股市其实比围棋更简单，目前已经有对冲基金公司将股票完全交给人工智能，通过深度学习、进化算法，人工智能可以通过自己的系统虚拟一批交易员，通过自己和自己竞争进化出最“优秀”的交易员，他们的投资回报率已经超过散户和普通的交易员。</p><p>研究得出结论说，在未来 10~20年，美国 47%的就业人口可能会面临失业风险，在中国这个数据可能大于60%，即便是想律师、金融分析师、保险理财师、医生、记着等看起来比较高端的职业也会受到很大的冲击。</p><h3 id="这个时代已经没有“稳定“的工作了。"><a href="#这个时代已经没有“稳定“的工作了。" class="headerlink" title="这个时代已经没有“稳定“的工作了。"></a>这个时代已经没有“稳定“的工作了。</h3><p>最近已经感到越来越多的人开始焦虑，是什么导致的焦虑呢，是现在社会环境的变化的不稳定性，是突然觉得自己前几十年基本算白活了，是生怕自己跑的不够快被这个时代所淘汰，是看到了越来越多厉害的人还再成几何速度的成长。</p><h4 id="我们该怎么办"><a href="#我们该怎么办" class="headerlink" title="我们该怎么办"></a>我们该怎么办</h4><h5 id="学会学习的能力"><a href="#学会学习的能力" class="headerlink" title="学会学习的能力"></a>学会学习的能力</h5><p>学习已经成了我们这代人一辈子的事，很可惜中国的应试教育让很多人考完大学后对学习这件事情再也没有了兴趣。</p><p>这个世界唯一不变的就是变化，而且会越来越快，现在已经不是像父辈一个工作能做几十年的时代了。</p><p>也不是靠点小聪明，接触到好的机会就能成功的时代，现在能创业成功的都是真有本事的人。</p><p>能够快速的学习一样新技能或者新知识的能力很重要，而最关键的是保持对这个世界保持敏感度和好奇心。</p><p>迈出第一步很困难，但只要你跨出了第一步，你会发现这个世界原来这么精彩，你对知识的渴望和焦虑会让你根本停不下脚步。</p><h5 id="对自己的职业生涯要做长久打算"><a href="#对自己的职业生涯要做长久打算" class="headerlink" title="对自己的职业生涯要做长久打算"></a>对自己的职业生涯要做长久打算</h5><p>现在依然有很多人削尖了脑袋想当公务员，想进入体制内，想得到一份“稳定”的工作给自己安全感，但其实真正的安全感永远来自自己的本事，自己的成长。</p><p>你是否有能力离开体制依然养活自己？</p><p>你的行业是朝阳产业还是已经在走下坡路，大的就业环境将很大程度决定你的发展。</p><p>多去分析一下你所在的行业受大数据和人工智能的影响将会如何改变。</p><h5 id="成为一个全才还是一个专才"><a href="#成为一个全才还是一个专才" class="headerlink" title="成为一个全才还是一个专才"></a>成为一个全才还是一个专才</h5><p>估计很多人会想到这样一种人，经常换职业，什么都尝试过，但是什么都不精。</p><p>我们都知道水桶能装多少水取决于最短的板，但这个原理只适用于考试，考试不会看你哪科考得最高，而是看你成绩之和，而社会不同，它只看你的长板是否够长。</p><p>那我们是不是要在某个领域或者一项技能上死磕呢？</p><p>我们都听过一万小时理论，要想成为一个领域的专家，你需要坚持一万小时的刻意练习，这是一个好策略，但在时代快速变化的现在并不是最高效的。</p><p>在单一维度竞争是非常残酷的，简单说超过所有人和超过大部分的普通人所需要的付出努力差距会非常大，做到顶尖的永远是少数，奥运会人们也只会记住金牌，而且在人工智能快速发展的今天，你终其一生死磕出来的技能很可能在将来被替代，到时候你找谁说理去。</p><p>我认为最好的策略是：首先至少要在一个领域做的比普通人强，刻意练习的方法是必须的，然后再拓展其他领域或者维度的技能，不一定要深耕，二八定理同样适用，你可以花少量的时间去了解一个行业的大概，等各方面都有一定的能力后你将会有不同的视角，碰撞出自己独特的竞争力。</p><p>现在明星也流行跨界，又演戏、又唱歌、又主持、又去玩喜剧就是这个道理。</p><p>按现在流行的话讲：成为一个“斜杠青年”。</p><h5 id="抱怨和抵抗是没用的的，我们要学会顺应潮流"><a href="#抱怨和抵抗是没用的的，我们要学会顺应潮流" class="headerlink" title="抱怨和抵抗是没用的的，我们要学会顺应潮流"></a>抱怨和抵抗是没用的的，我们要学会顺应潮流</h5><p>英国工业革命的时候工人们害怕丢掉工作到工厂砸机器，但是丝毫不会影响工业化进程。</p><p>我们现在已经进入了以大数据和人工智能为主导的第四次工业革命，各行各业会有很大的变革，而这造成很多人丢掉工作的同时也带来了新的机会。</p><p>特斯拉的汽车装配厂全部由机器人装配，汽车工会的人在特斯拉门口示威，抗议特斯拉不招汽车工会的工人，其实特斯拉的员工数量增长的非常快，只不过都是IT人员。</p><p>我们要学会顺应时代潮流的变化，努力改变自己去迎合时代，不改变只能被淘汰。</p><p>在智能时代最重要的能力就是和机器共事的能力，也就是用机器去完成我们很困难或者根本无法完成的工作。</p><p>如果你是工厂流水线的操作工，你可以学习如何操作流水线上的机器，就算再智能，机器也需要人的操作和维护。</p><p>如果你不想让你的孩子吃亏，趁早让他学习一门编程语言，因为在以后的时代，编程语言可能会像现在的英语一样重要。</p><p>那些简单的重复劳动被替代的概率很大，艺术、设计、创造或与人相关的工作被替换的概率很低。</p><p>这个时代正在加速，如果你还没有察觉到，它将和你擦身而过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://image.nianlun.tech/2020/11/07/f6701e307d54c49f2b61c3ccdd42a03f.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;从AlphaGo战胜李世石到年前 AlphaGo2.0在快棋平台59连胜血洗
      
    
    </summary>
    
      <category term="随笔" scheme="http://qlql489.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="人工智能" scheme="http://qlql489.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>新晋程序员如何快速提升自己</title>
    <link href="http://qlql489.github.io/2017/02/24/%E6%96%B0%E6%99%8B%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8F%90%E5%8D%87%E8%87%AA%E5%B7%B1/"/>
    <id>http://qlql489.github.io/2017/02/24/新晋程序员如何快速提升自己/</id>
    <published>2017-02-24T16:44:33.000Z</published>
    <updated>2022-11-19T08:49:40.695Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img3.imgtn.bdimg.com/it/u=3216675625,2988493572&amp;fm=23&amp;gp=0.jpg" alt=""></p><p>做javaweb已经有一段时间，虽然算不上大牛，但也积累了一些经验，最近主导公司一个项目的架构。同时指导新人，发现了新人身上存在的一些问题。我其实还算有耐心。但他们有些问题让我很抓狂。想起我刚工作时师傅抓狂的表情，我觉得有必要给刚毕业和刚入职场的程序员一些建议。</p><h3 id="学习的态度和方法很重要"><a href="#学习的态度和方法很重要" class="headerlink" title="学习的态度和方法很重要"></a>学习的态度和方法很重要</h3><p>刚工作不久肯定很多东西都不会，学校学的和真实的项目差很多，培训机构也只能教你一些表面功夫，你会经历各种异常和报错，不要恐慌，利用百度和谷歌，尽快和他们混个脸熟。</p><p>学会js的debug、ajax请求、表单提交、传参、json解析等基本知识，将数据的传递搞清楚，程序异常了先自己找找原因，debug试试，是js错误还是前段值没传过来，是后端变量名字没对上还是配置档配错了，仔细检查检查，<strong>不要一报错就找人解决，尽量自己找出解决方法，如果实在解决不了再去找同事帮忙，最好连同几个问题一起去问</strong>，别人也有工作要忙，经常打断会降低工作效率，影响别人的进度。</p><p>问问题前想好自己的问题再说，你可能会问，问问题都不会吗，是的，很多人不太注意自己沟通表达的方式。</p><p>我带的一个新人，每次问问题都是一堆语气词，你看，怎么怎么着，等着我回复，然后怎么怎么着，又等着我回复，说了一堆和问题不太相关的话，最后我实在忍不住，打断他说你到底想问什么，他才说出自己的问题。</p><p><strong>问问题前在自己脑子里过一边，简洁的提出问题，再描述现象</strong></p><p>有时别人给出一个具体方案没有解释清楚，我们也懂为什么时，在时间和条件允许的情况下去请教清楚：<br>我刚开始工作领导是不让用system.out.println来输出的，一定要用logger，我就不明白为什么，之前教的就这么用啊，但是改起来也不费劲，我也没详细去问，直到后来接的一个项目，里面有很多system.out.println输出，你在控制台只能看到输出根本找不到是哪个类哪个方法输出的，我才明白为什么。</p><p>###学习学习再学习 练习练习再练习<br>想要成为一个顶尖高手，关键是刻意练习，成为一个优秀的程序员，不停地学习和练习是必须的。</p><p>新人刚开始时迷茫是很正常，想要努力学习却没有方向。多去问问前辈和同事还有领导，和他们沟通学习的方向，记住<strong>成长比成功更重要</strong>。</p><p>软件技术更新速度飞快，非关系型数据库、nodejs、容器技术、h5 、前后端分离、到现在react ironic 一套搞定ios android 微信公众号，你可能刚学会一个新技术又出来一个更稳定更好用的，所以自学能力非常重要，要时刻保持对新技术的敏感，不一定要精通，也不要出了什么都去学，一般新技术的产生都是为了解决现有技术的瓶颈，了解它产生的背景，以及要解决的问题很重要。</p><p>我们刚工作碰到的肯定是别人已经搭好框架的项目，我们写代码只是填充其血肉，我们很少思考他为什么这么写，这些配置都有什么用，换成别的行不行，<strong>有了一定基础后要试着尝试自己从0搭建一个项目</strong>，这样你就能明白这些过滤器、拦截器、插件、依赖的作用，对你的能力有很大的提升。</p><p>如果碰上一个刚起步的新项目会是一个很好的机会，你会经历整个架构的演变，碰到很多坑和问题，这些都是很宝贵的经验。</p><p>有了一些小想法或者新技术自己写个小项目试试，慢慢的你的经验会越来越丰富，而不是仅仅知道公司的项目，下班少去看电视剧，玩游戏，自己多实践，写写东西，等一个问题顺利解决或实现了一个小功能，你会体会到无比的成就感。</p><p>###不要依赖技术大牛<br>很长一段时间，我在碰到自己解决不了的问题时，都回去问公司里的大牛，感觉很可靠也很厉害，所有的问题都能解决，虽然问题是很快的解决了，但是很少有自己的思考，说白了就是懒，能靠着着别人。后来离开了这个大牛，遇到了问题只能自己死磕，就是一段时间的死磕是自己学到了很多知识，看懂了很多比较底层的原理，也变成了帮别人解决问题的人，提升很大。</p><p>###养成看源码的习惯<br>刚开始的时候我也很惧怕看源码，一个是懒，再就是觉得自己看不懂，后来没办法，代码出问题找不到原因，只能硬着头皮跟进去看，开始的确很费劲，看多了就能了解个大概了，你可以了解到一些技术细节，系统的看源码可以学习别人的编程思想，这里推荐学java的同学有时间去研究一下spring的源码，帮助多多。</p><p>###代码规范<br>代码规范很重要，不要以为代码是给机器读的就写的很随意，代码是给人看的，你不可能在这干一辈子，总有一天有人要接过你的代码，如果你的代码只有你能看懂，你能想到和你交接的人的心情吗，肯定很想从新写一遍，规范其实也不用非常严格，规范不是限制，下面给出一些常见的java规范：</p><ul><li><p>除了静态变量，大部分标识符使用驼峰法则，标识符能准确的表达出它所代表的意义，不要使用supplier1、 service2、aaa、bbb等，包名小写，类名首字母大写，其他文件首字母都小写。</p></li><li><p>状态、类型、参数名称不要直接使用字符串或数字等比较，除非只有一个类中使用   </p><ul><li><p>这么写别人根本不知道2是什么状态</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(orderStatus.equels(<span class="number">2</span>)&#123;</span><br><span class="line">  xxxx</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 正确的写法</span></span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderStatus</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORDERSTATUS_NEW = <span class="number">1</span>;<span class="comment">//新建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORDERSTATUS_PAID = <span class="number">2</span>;<span class="comment">//已支付</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORDERSTATUS_DELIVERY = <span class="number">3</span>;<span class="comment">//已发货</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(orderStatus.equels(OrderStatus.ORDERSTATUS_PAID)&#123;</span><br><span class="line">    xxxx</span><br><span class="line">    &#125; </span><br><span class="line">  `</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>注释掉的测试代码或不用的类请尽快删掉，如果还有用的请添加FIXME+注释，否则时间长了自己也不知道为什么注释掉，代码越来越多不好维护</p></li><li><p>编译工具的format要统一，在formatter代码时最好不要全选整个类，而是只format编辑的方法，这样如果大家同时修改一个类而formatter不同会导致更新代码时大量的冲突</p></li><li><p>单个方法不要超过300行,类不要超过3000行，重构请参考《重构<em>-</em>改善既有代码的设计》</p></li><li><p>尽量缩小变量的作用域，作用域过大可能回引起很多想不到的bug。</p></li><li><p>如果代码需要公用，尽量不要复制粘贴，请提到service或util中。</p></li></ul><p>做程序员对很多人其实很苦，你是否因为有“钱景“加入这个行业，你是否真的有兴趣长时间对着电脑敲代码，你能否因为一个小问题一晚上找不到原因继续坚持，如果你想好了就脚踏实地的努力，我们一起共同学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://img3.imgtn.bdimg.com/it/u=3216675625,2988493572&amp;amp;fm=23&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;做javaweb已经有一段时间，虽然算不上大牛，但也积累了一些经验
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="随笔" scheme="http://qlql489.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hashmap 原理解析</title>
    <link href="http://qlql489.github.io/2015/07/21/hashmap-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://qlql489.github.io/2015/07/21/hashmap-原理解析/</id>
    <published>2015-07-21T17:38:32.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p>HashMap的原理在面试时经常问到，也有很多人分析过，自己也写一写，仅供参考，部分内容参考别人的文章</p><h2 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h2><p>数组和链表是最基本的数据结构，但这两个基本是两个极端</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组存储区间是连续的，占用内存严重，故空间复杂的很大。但数组的二分查找</p><p>时间复杂度小，为O(1)；数组的特点是：寻址容易，插入和删除困难；</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大 O(N)。链表的特点是：寻址困难，插入和删除容易。</p><p>Hashmap实际上是一个数组和链表的结合体</p><p><img src="http://image.nianlun.tech/2018/11/13/400afa866595ba7ff249abb2e3a43590.jpeg" alt=""></p><p>hashmap中存数据的过程，通过key得到hashcode，利用hashcode可以得到在数组中的下标，如果下标已经有东西了，就插入到链表的表头。取的话，通过key得到hashcode，确定下标，如果不止一个元素，就通过equals遍历链表取得。</p><p>hashmap大小是2的幂次方，是因为这样可以尽可能的减小碰撞的发生，碰撞越多，性能越差。</p><p>hashmap中有个loadFactor参数，为0.75，这个值用来决定什么时候要resize hashmap（目的是减少碰撞的发生，但是这件事情很耗时间）</p><h2 id="HashMap部分源码"><a href="#HashMap部分源码" class="headerlink" title="HashMap部分源码"></a>HashMap部分源码</h2><h3 id="Entry-键值对"><a href="#Entry-键值对" class="headerlink" title="Entry 键值对"></a>Entry 键值对</h3><p>HashMa加载因子 默认0.75<br>若:加载因子越大,填满的元素越多,好处是,空间利用率高了,但:冲突的机会加大了.链表长度会越来越长,查找效率降低。<br>反之,加载因子越小,填满的元素越少,好处是:冲突的机会减小了,但:空间浪费多了.表中的数据将过于稀疏<br>理Hash冲突的，形成链表</p><h3 id="关键属性"><a href="#关键属性" class="headerlink" title="关键属性"></a>关键属性</h3><p>加载因子 默认0.75</p><p>若:加载因子越大,填满的元素越多,好处是,空间利用率高了,但:冲突的机会加大了.链表长度会越来越长,查找效率降低。</p><p>反之,加载因子越小,填满的元素越少,好处是:冲突的机会减小了,但:空间浪费多了.表中的数据将过于稀疏</p><h3 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h3><p>hashCode的算法就不讲解了，在hashmap中要找到某个元素，需要根据key的hash值来求得对应数组中的位置。如何计算这个位置就是hash算法。hashmap的数据结构是数组和链表的结合，所以我们当然希望这个hashmap里面的元素位置尽量的分布均匀些，方法就是取模运算，这样元素的分布比较均匀，java中是这么做的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns index for hash code h.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// assert Integer.bitCount(length) == 1 :  "length must be a non-zero power of 2";</span></span><br><span class="line">       <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>为什么数组的大小要是2的n次方大小，这样HashMap的性能最高。当length=2^n时，hashcode &amp; (length-1) ==hashcode % length，位运算当然比取余效率高。length为2的整数次幂的话，为偶数，这样length-1为奇数，奇数的最后一位是1，这样便保证了h&amp;(length-1)的最后一位可能为0，也可能为1（这取决于h的值），即与后的结果可能为偶数，也可能为奇数，这样便可以保证散列的均匀性</p><p>而如果length为奇数的话，很明显length-1为偶数，它的最后一位是0，这样h&amp;(length-1)的最后一位肯定为0，即只能为偶数，这样任何hash值都只会被散列到数组的偶数下标位置上，这便浪费了近一半的空间。</p><p>在存储大容量数据的时候，最好预先指定hashmap的size为2的整数次幂次方。就算不指定的话，也会以大于且最接近指定值大小的2次幂来初始化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">    * capacity and load factor.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">    *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">       <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                              loadFactor);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Find a power of 2 &gt;= initialCapacity</span></span><br><span class="line">       <span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">      &lt;span style="color:#ff6666;"&gt; &lt;/span&gt;&lt;span style="color:#3366ff;"&gt;while (capacity &lt; initialCapacity)</span><br><span class="line">           capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">       threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</span><br><span class="line">       table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">       init();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第2和3行的作用就是处理key值为null的情况，我们看看putForNullKey(value)方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果有null的元素侧替换掉</p><p>如果key为null的话，hash值为0，对象存储在数组中索引为0的位置。即table[0]</p><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> getForNullKey();</span><br><span class="line">       <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">            e != <span class="keyword">null</span>;</span><br><span class="line">            e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">               <span class="keyword">return</span> e.value;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h3><p>在addEntry方法中判断如果map的大小超过阈值则进行扩容  </p><pre><code class="java"> <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>{    Entry&lt;K,V&gt; e = table[bucketIndex];        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);        <span class="keyword">if</span> (size++ &gt;= threshold)            resize(<span class="number">2</span> * table.length);    } <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>{        Entry[] oldTable = table;        <span class="keyword">int</span> oldCapacity = oldTable.length;        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) {            threshold = Integer.MAX_VALUE;            <span class="keyword">return</span>;        }        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];        transfer(newTable);        table = newTable;        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);    } <span class="comment">//调用了比较消耗性能的transfer方法</span><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>{        Entry[] src = table;        <span class="keyword">int</span> newCapacity = newTable.length;        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) {            Entry&lt;K,V&gt; e = src[j];            <span class="keyword">if</span> (e != <span class="keyword">null</span>) {                src[j] = <span class="keyword">null</span>;                <span class="keyword">do</span> {                    Entry&lt;K,V&gt; next = e.next;                    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);                    e.next = newTable[i];                    newTable[i] = e;                    e = next;                } <span class="keyword">while</span> (e != <span class="keyword">null</span>);            }        }    }</code></pre><p>transfer方法，将HashMap的全部元素添加到新的HashMap中,并重新计算元素在新的数组中的索引位置，在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize，默认的情况下，数组大小16，当元素个数超过16*0.75=12时，就把数组扩展一倍32，重新计算每个元素在数组中的位置，数组的复制非常消耗性能，所以如果预知map的大小，那么初始元素个数能够提高map的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HashMap的原理在面试时经常问到，也有很多人分析过，自己也写一写，仅供参考，部分内容参考别人的文章&lt;/p&gt;
&lt;h2 id=&quot;HashMap的数据结构&quot;&gt;&lt;a href=&quot;#HashMap的数据结构&quot; class=&quot;headerlink&quot; title=&quot;HashMap的数
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java编程中“为了性能”尽量要做到的一些地方</title>
    <link href="http://qlql489.github.io/2014/03/05/Java%E7%BC%96%E7%A8%8B%E4%B8%AD%E2%80%9C%E4%B8%BA%E4%BA%86%E6%80%A7%E8%83%BD%E2%80%9D%E5%B0%BD%E9%87%8F%E8%A6%81%E5%81%9A%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9C%B0%E6%96%B9/"/>
    <id>http://qlql489.github.io/2014/03/05/Java编程中“为了性能”尽量要做到的一些地方/</id>
    <published>2014-03-05T17:26:38.000Z</published>
    <updated>2022-11-19T08:49:40.691Z</updated>
    
    <content type="html"><![CDATA[<p>最近的机器内存又爆满了，除了新增机器内存外，还应该好好review一下我们的代码，有很多代码编写过于随意化，这些不好的习惯或对程序语言的不了解是应该好好打压打压了。</p><p>下面是参考网络资源总结的一些在Java编程中尽可能要做到的一些地方。</p><h3 id="尽量在合适的场合使用单例"><a href="#尽量在合适的场合使用单例" class="headerlink" title="尽量在合适的场合使用单例"></a>尽量在合适的场合使用单例</h3><p>使用单例可以减轻加载的负担，缩短加载的时间，提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面： </p><ul><li>第一，控制资源的使用，通过线程同步来控制资源的并发访问； </li><li>第二，控制实例的产生，以达到节约资源的目的；  </li><li>第三，控制数据共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信。 </li></ul><h3 id="尽量避免随意使用静态变量"><a href="#尽量避免随意使用静态变量" class="headerlink" title="尽量避免随意使用静态变量"></a>尽量避免随意使用静态变量</h3><p>要知道，当某个对象被定义为stataic变量所引用，那么gc通常是不会回收这个对象所占有的内存，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class A&#123;  </span><br><span class="line">static B b = new B(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时静态变量b的生命周期与A类同步，如果A类不会卸载，那么b对象会常驻内存，直到程序终止。</p><h3 id="尽量避免过多过常的创建Java对象"><a href="#尽量避免过多过常的创建Java对象" class="headerlink" title="尽量避免过多过常的创建Java对象"></a>尽量避免过多过常的创建Java对象</h3><p>尽量避免在经常调用的方法，循环中new对象，由于系统不仅要花费时间来创建对象，而且还要花时间对这些对象进行垃圾回收和处理，在我们可以控制的范围内，最大限度的重用对象，最好能用基本的数据类型或数组来替代对象。</p><h3 id="尽量使用final修饰符"><a href="#尽量使用final修饰符" class="headerlink" title="尽量使用final修饰符"></a>尽量使用final修饰符</h3><p>带有final修饰符的类是不可派生的。在Java核心API中，有许多应用final的例子，例如java.lang.String。为String类指定final防止了使用者覆盖length()方法。另外，如果一个类是final的，则该类所有方法都是final的。Java编译器会寻找机会内联（inline）所有的final方法（这和具体的编译器实现有关）。此举能够使性能平均提高50%。</p><h3 id="尽量使用局部变量"><a href="#尽量使用局部变量" class="headerlink" title="尽量使用局部变量"></a>尽量使用局部变量</h3><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（Stack）中，速度较快。其他变量，如静态变量、实例变量等，都在堆（Heap）中创建，速度较慢。</p><h3 id="尽量处理好包装类型和基本类型两者的使用场所"><a href="#尽量处理好包装类型和基本类型两者的使用场所" class="headerlink" title="尽量处理好包装类型和基本类型两者的使用场所"></a>尽量处理好包装类型和基本类型两者的使用场所</h3><p>虽然包装类型和基本类型在使用过程中是可以相互转换，但它们两者所产生的内存区域是完全不同的，基本类型数据产生和处理都在栈中处理，包装类型是对象，是在堆中产生实例。<br>在集合类对象，有对象方面需要的处理适用包装类型，其他的处理提倡使用基本类型。</p><h3 id="慎用synchronized，尽量减小synchronize的方法"><a href="#慎用synchronized，尽量减小synchronize的方法" class="headerlink" title="慎用synchronized，尽量减小synchronize的方法"></a>慎用synchronized，尽量减小synchronize的方法</h3><p>都知道，实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。synchronize方法被调用时，直接会把当前对象锁 了，在方法执行完之前其他线程无法调用当前对象的其他方法。所以synchronize的方法尽量小，并且应尽量使用方法同步代替代码块同步。</p><h3 id="尽量使用StringBuilder和StringBuffer进行字符串连接"><a href="#尽量使用StringBuilder和StringBuffer进行字符串连接" class="headerlink" title="尽量使用StringBuilder和StringBuffer进行字符串连接"></a>尽量使用StringBuilder和StringBuffer进行字符串连接</h3><p>这个就不多讲了。</p><h3 id="尽量不要使用finalize方法"><a href="#尽量不要使用finalize方法" class="headerlink" title="尽量不要使用finalize方法"></a>尽量不要使用finalize方法</h3><p>实际上，将资源清理放在finalize方法中完成是非常不好的选择，由于GC的工作量很大，尤其是回收Young代内存时，大都会引起应用程序暂停，所以再选择使用finalize方法进行资源清理，会导致GC负担更大，程序运行效率更差。</p><h3 id="尽量使用基本数据类型代替对象"><a href="#尽量使用基本数据类型代替对象" class="headerlink" title="尽量使用基本数据类型代替对象"></a>尽量使用基本数据类型代替对象</h3><p>String str = “hello”;<br>上面这种方式会创建一个“hello”字符串，而且JVM的字符缓存池还会缓存这个字符串；<br>String str = new String(“hello”);<br>此时程序除创建字符串外，str所引用的String对象底层还包含一个char[]数组，这个char[]数组依次存放了h,e,l,l,o</p><h3 id="单线程应尽量使用HashMap、ArrayList"><a href="#单线程应尽量使用HashMap、ArrayList" class="headerlink" title="单线程应尽量使用HashMap、ArrayList"></a>单线程应尽量使用HashMap、ArrayList</h3><p>HashTable、Vector等使用了同步机制，降低了性能。</p><h3 id="尽量合理的创建HashMap"><a href="#尽量合理的创建HashMap" class="headerlink" title="尽量合理的创建HashMap"></a>尽量合理的创建HashMap</h3><p>当你要创建一个比较大的hashMap时，充分利用另一个构造函数<br>public HashMap(int initialCapacity, float loadFactor)<br>避免HashMap多次进行了hash重构,扩容是一件很耗费性能的事，在默认中initialCapacity只有16，而loadFactor是 0.75，需要多大的容量，你最好能准确的估计你所需要的最佳大小，同样的Hashtable，Vectors也是一样的道理。</p><h3 id="尽量在finally块中释放资源"><a href="#尽量在finally块中释放资源" class="headerlink" title="尽量在finally块中释放资源"></a>尽量在finally块中释放资源</h3><p>程序中使用到的资源应当被释放，以避免资源泄漏。这最好在finally块中去做。不管程序执行的结果如何，finally块总是会执行的，以确保资源的正确关闭。 </p><h3 id="尽量使用移位来代替’a-b’的操作"><a href="#尽量使用移位来代替’a-b’的操作" class="headerlink" title="尽量使用移位来代替’a/b’的操作"></a>尽量使用移位来代替’a/b’的操作</h3><p>“/“是一个代价很高的操作，使用移位的操作将会更快和更有效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如 </span><br><span class="line">int num = a / 4;  </span><br><span class="line">int num = a / 8;  </span><br><span class="line">应该改为  </span><br><span class="line">int num = a &lt;&lt; 2;  </span><br><span class="line">int num = a &lt;&lt; 3;</span><br></pre></td></tr></table></figure></p><p>但注意的是使用移位应添加注释，因为移位操作不直观，比较难理解</p><h3 id="尽量确定StringBuffer的容量"><a href="#尽量确定StringBuffer的容量" class="headerlink" title="尽量确定StringBuffer的容量"></a>尽量确定StringBuffer的容量</h3><p>StringBuffer 的构造器会创建一个默认大小（通常是16）的字符数组。在使用中，如果超出这个大小，就会重新分配内存，创建一个更大的数组，并将原先的数组复制过来，再 丢弃旧的数组。在大多数情况下，你可以在创建 StringBuffer的时候指定大小，这样就避免了在容量不够的时候自动增长，以提高性能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：StringBuffer buffer = new StringBuffer(1000);</span><br></pre></td></tr></table></figure></p><h3 id="尽量早释放无用对象的引用"><a href="#尽量早释放无用对象的引用" class="headerlink" title="尽量早释放无用对象的引用"></a>尽量早释放无用对象的引用</h3><p>大部分时，方法局部引用变量所引用的对象 会随着方法结束而变成垃圾，因此，大部分时候程序无需将局部，引用变量显式设为null。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Public void test()&#123;  </span><br><span class="line">Object obj = new Object();  </span><br><span class="line">……  </span><br><span class="line">Obj=null;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尽量避免使用二维数组"><a href="#尽量避免使用二维数组" class="headerlink" title="尽量避免使用二维数组"></a>尽量避免使用二维数组</h3><p>二维数据占用的内存空间比一维数组多得多，大概10倍以上。</p><h3 id="尽量避免使用split"><a href="#尽量避免使用split" class="headerlink" title="尽量避免使用split"></a>尽量避免使用split</h3><p>除非是必须的，否则应该避免使用split，split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需 要频繁的调用split，可以考虑使用apache的StringUtils.split(string,char)，频繁split的可以缓存结果。</p><h3 id="ArrayList-amp-LinkedList"><a href="#ArrayList-amp-LinkedList" class="headerlink" title="ArrayList &amp; LinkedList"></a>ArrayList &amp; LinkedList</h3><p>一 个是线性表，一个是链表，一句话，随机查询尽量使用ArrayList，ArrayList优于LinkedList，LinkedList还要移动指 针，添加删除的操作LinkedList优于ArrayList，ArrayList还要移动数据，不过这是理论性分析，事实未必如此，重要的是理解好2 者得数据结构，对症下药。</p><h3 id="尽量使用System-arraycopy-代替通过来循环复制数组"><a href="#尽量使用System-arraycopy-代替通过来循环复制数组" class="headerlink" title="尽量使用System.arraycopy ()代替通过来循环复制数组"></a>尽量使用System.arraycopy ()代替通过来循环复制数组</h3><p>System.arraycopy() 要比通过循环来复制数组快的多 </p><h3 id="尽量缓存经常使用的对象"><a href="#尽量缓存经常使用的对象" class="headerlink" title="尽量缓存经常使用的对象"></a>尽量缓存经常使用的对象</h3><p>尽可能将经常使用的对象进行缓存，可以使用数组，或HashMap的容器来进行缓存，但这种方式可能导致系统占用过多的缓存，性能下降，推荐可以使用一些第三方的开源工具，如EhCache，Oscache进行缓存，他们基本都实现了FIFO/FLU等缓存算法。</p><h3 id="尽量避免非常大的内存分配"><a href="#尽量避免非常大的内存分配" class="headerlink" title="尽量避免非常大的内存分配"></a>尽量避免非常大的内存分配</h3><p>有时候问题不是由当时的堆状态造成的，而是因为分配失败造成的。分配的内存块都必须是连续的，而随着堆越来越满，找到较大的连续块越来越困难。</p><h3 id="慎用异常"><a href="#慎用异常" class="headerlink" title="慎用异常"></a>慎用异常</h3><p>当创建一个异常时，需要收集一个栈跟踪(stack track)，这个栈跟踪用于描述异常是在何处创建的。构建这些栈跟踪时需要为运行时栈做一份快照，正是这一部分开销很大。当需要创建一个 Exception 时，JVM 不得不说：先别动，我想就您现在的样子存一份快照，所以暂时停止入栈和出栈操作。栈跟踪不只包含运行时栈中的一两个元素，而是包含这个栈中的每一个元素。<br>如 果您创建一个 Exception ，就得付出代价。好在捕获异常开销不大，因此可以使用 try-catch 将核心内容包起来。从技术上讲，您甚至可以随意地抛出异常，而不用花费很大的代价。招致性能损失的并不是 throw 操作——尽管在没有预先创建异常的情况下就抛出异常是有点不寻常。真正要花代价的是创建异常。幸运的是，好的编程习惯已教会我们，不应该不管三七二十一就 抛出异常。异常是为异常的情况而设计的，使用时也应该牢记这一原则。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近的机器内存又爆满了，除了新增机器内存外，还应该好好review一下我们的代码，有很多代码编写过于随意化，这些不好的习惯或对程序语言的不了解是应该好好打压打压了。&lt;/p&gt;
&lt;p&gt;下面是参考网络资源总结的一些在Java编程中尽可能要做到的一些地方。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="程序人生" scheme="http://qlql489.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="java" scheme="http://qlql489.github.io/tags/java/"/>
    
  </entry>
  
</feed>
